{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanjithm/hunter-ai/src/app/actions.ts"],"sourcesContent":["\"use server\"\nimport axios from \"axios\";\nimport pLimit from \"p-limit\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\nimport { JsonOutputParser } from \"@langchain/core/output_parsers\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\n\n/**\n * High-ROI defaults (override via env)\n */\nconst GITHUB_API = process.env.NEXT_GITHUB_API || \"https://api.github.com\";\nconst GITHUB_TOKEN = process.env.NEXT_GITHUB_TOKEN || \"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\";\nconst OPENAI_KEY = process.env.NEXT_OPENAI_API_KEY || \"\";\nconst OPENAI_MODEL = process.env.OPENAI_MODEL || \"gpt-3.5-turbo\";\nconst MAX_FILE_SIZE = Number(process.env.MAX_FILE_SIZE_BYTES || 1024 * 1024); // 1MB\nconst MAX_FILES = Number(process.env.MAX_FILES || 100);\nconst BATCH_DOWNLOAD_CONCURRENCY = Number(process.env.BATCH_DOWNLOAD_CONCURRENCY || 8); // Increased for faster downloads\nconst LINES_PER_CHUNK = Number(process.env.LINES_PER_CHUNK || 200);\n\n// Validate environment on server startup\nvalidateEnvironmentOnStartup();\n\n/* ----------------------------\n   Import Types from types.d.ts\n   ---------------------------- */\nimport type { \n  CodeSnippet, \n  Vulnerability, \n  ScanResult, \n  VulnerabilityCardContentType, \n  SemgrepFinding \n} from \"@/types\";\nimport { validateEnvironmentOnStartup } from \"@/lib/env-validation\";\n\n/* ----------------------------\n   Enhanced Semgrep Integration\n   ---------------------------- */\nexport async function runSemgrepAnalysis(repoPath: string): Promise<SemgrepFinding[]> {\n  return new Promise((resolve, reject) => {\n    console.log(`🔍 Running enhanced Semgrep analysis on ${repoPath}...`);\n    \n    // Set up environment variables for the Python script\n    const env = {\n      ...process.env,\n      OPENAI_API_KEY: OPENAI_KEY,\n      PYTHONPATH: process.cwd()\n    };\n\n    const scriptPath = path.join(process.cwd(), 'semgrep_scanner.py');\n    \n    // Spawn Python process\n    const pythonProcess = spawn('python3', [scriptPath, repoPath], {\n      env,\n      cwd: process.cwd()\n    });\n\n    let stdout = '';\n    let stderr = '';\n\n    pythonProcess.stdout.on('data', (data) => {\n      stdout += data.toString();\n    });\n\n    pythonProcess.stderr.on('data', (data) => {\n      stderr += data.toString();\n    });\n\n    pythonProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(`Python script exited with code ${code}`);\n        console.error(`stderr: ${stderr}`);\n        reject(new Error(`Semgrep analysis failed: ${stderr}`));\n        return;\n      }\n\n      try {\n        // Extract JSON from stdout (everything after the last line of dashes)\n        const lines = stdout.split('\\n');\n        let jsonStartIndex = -1;\n        \n        for (let i = lines.length - 1; i >= 0; i--) {\n          if (lines[i].includes('📋 SECURITY SCAN RESULTS') || lines[i].startsWith('[')) {\n            jsonStartIndex = lines[i].startsWith('[') ? i : i + 2;\n            break;\n          }\n        }\n        \n        if (jsonStartIndex === -1) {\n          // Look for any JSON array in the output\n          for (let i = 0; i < lines.length; i++) {\n            if (lines[i].trim().startsWith('[')) {\n              jsonStartIndex = i;\n              break;\n            }\n          }\n        }\n\n        if (jsonStartIndex !== -1) {\n          const jsonStr = lines.slice(jsonStartIndex).join('\\n');\n          const findings = JSON.parse(jsonStr);\n          console.log(`✅ Parsed ${findings.length} Semgrep findings`);\n          resolve(findings);\n        } else {\n          console.log('No JSON findings found in output');\n          resolve([]);\n        }\n      } catch (error) {\n        console.error('Failed to parse Semgrep output:', error);\n        console.log('Raw output:', stdout);\n        resolve([]);\n      }\n    });\n\n    pythonProcess.on('error', (error) => {\n      console.error('Failed to start Python process:', error);\n      reject(error);\n    });\n\n    // Set timeout\n    setTimeout(() => {\n      pythonProcess.kill();\n      reject(new Error('Semgrep analysis timed out'));\n    }, 120000); // 2 minutes timeout\n  });\n}\n\n/* ----------------------------\n   Pure AI-Powered Security Analysis (No Hardcoded Patterns)\n   ---------------------------- */\n\nasync function analyzeCodeWithAI(snippet: CodeSnippet): Promise<Vulnerability[]> {\n  if (!OPENAI_KEY) {\n    throw new Error(\"OpenAI API key not configured. Please set NEXT_OPENAI_API_KEY in your environment variables to enable AI-powered security analysis.\");\n  }\n\n  console.log(`🤖 Running pure AI security analysis on ${snippet.name}`);\n  \n  const model = new ChatOpenAI({\n    model: OPENAI_MODEL,\n    temperature: 0,\n    openAIApiKey: OPENAI_KEY,\n  });\n\n  const enhancedSecurityPrompt = `You are an elite cybersecurity expert with decades of experience in vulnerability research and code auditing.\n\nMISSION: Perform a comprehensive security analysis of this code with forensic precision.\n\nCODE TO ANALYZE:\nFile: ${snippet.name}\nLanguage: ${snippet.language}\nSize: ${snippet.content.length} characters\n\n\\`\\`\\`${snippet.language}\n${snippet.content}\n\\`\\`\\`\n\nANALYSIS REQUIREMENTS:\n1. Examine EVERY line for security implications\n2. Consider data flow and execution paths\n3. Identify attack vectors and exploitation scenarios\n4. Assess business logic vulnerabilities\n5. Evaluate framework-specific security issues\n\nIMPORTANT: Only report vulnerabilities if you are highly confident they exist in the code. Do NOT report issues unless you can clearly identify them in the code. If you are unsure, do NOT report a vulnerability.\n\nVULNERABILITY CATEGORIES TO ASSESS:\n🔴 CRITICAL: SQL Injection, Command Injection, Code Injection, Authentication Bypass\n🟠 HIGH: XSS, Path Traversal, Hardcoded Secrets, Insecure Deserialization\n🟡 MEDIUM: Weak Crypto, CSRF, Information Disclosure, Input Validation\n\nFor each vulnerability discovered, provide this EXACT JSON structure:\n[\n  {\n    \"severity\": \"medium|high|critical\",\n    \"title\": \"Concise vulnerability name (max 50 chars)\",\n    \"description\": \"Detailed technical explanation: What is the vulnerability? How can it be exploited? What's the impact? Include attack scenarios.\",\n    \"startLine\": line_number_where_vulnerability_starts,\n    \"endLine\": line_number_where_vulnerability_ends,\n    \"fix\": \"The FULL code with ALL vulnerabilities fixed, not just a generic example. The code should be the original code, but with all issues resolved in-place. If multiple vulnerabilities exist, the fix should show the code with all of them fixed together. Include necessary imports/dependencies if needed.\",\n    \"confidence\": confidence_score_0_to_1,\n    \"cwe\": \"CWE-XXX (if applicable)\",\n    \"owasp\": \"OWASP Top 10 category (if applicable)\",\n    \"attack_vector\": \"How an attacker would exploit this vulnerability\",\n    \"business_impact\": \"Real-world consequences of successful exploitation\"\n  }\n]\n\nCRITICAL INSTRUCTIONS:\n- Return ONLY valid JSON array\n- If no vulnerabilities found or if the descriptions is no issues found return: []\n- NO markdown formatting, NO extra text\n- In the 'fix' field, always return the full code with all vulnerabilities fixed, not just a generic example. The code should be updated in-place, not appended as comments at the bottom.\n- Be thorough but precise\n- Consider both obvious and subtle vulnerabilities\n- Look for logic flaws specific to the application context\n\nEXTRA VERIFICATION: Before reporting any vulnerability, use the Semgrep API (static analysis engine) to check if the issue is actually present in the code. Only report vulnerabilities that are confirmed by Semgrep or are extremely obvious in the code. If Semgrep does not confirm the issue, do NOT report it.`;\n\n  try {\n    const response = await model.invoke(enhancedSecurityPrompt);\n    const aiResponse = response.content as string;\n    \n    // Clean and parse AI response\n    let jsonStr = aiResponse.trim();\n    \n    // Remove any markdown formatting\n    if (jsonStr.startsWith('```')) {\n      jsonStr = jsonStr.replace(/```[a-z]*\\n?/g, '').replace(/```$/g, '');\n    }\n    \n    // Parse the JSON response\n    let aiVulnerabilities;\n    try {\n      aiVulnerabilities = JSON.parse(jsonStr);\n    } catch (jsonError) {\n      console.error(`JSON parsing failed for ${snippet.name}:`, jsonError);\n      console.error(`Raw AI response:`, aiResponse);\n      throw new Error(`AI analysis failed: Unable to parse security analysis results for ${snippet.name}`);\n    }\n    \n    // Convert to our internal Vulnerability format\n    const vulnerabilities: Vulnerability[] = aiVulnerabilities.map((v: any) => ({\n      severity: v.severity === 'critical' ? 'high' : (v.severity || \"medium\") as \"medium\" | \"high\",\n      title: v.title || \"Security Issue Detected\",\n      description: v.description || \"AI identified a potential security vulnerability\",\n      file: snippet.name,\n      startLine: v.startLine || 1,\n      endLine: v.endLine || v.startLine || 1,\n      fix: v.fix || \"Review code for security improvements\",\n      confidence: v.confidence || 0.85\n    }));\n    \n    console.log(`✅ AI analysis complete: ${vulnerabilities.length} vulnerabilities found in ${snippet.name}`);\n    \n    // Log detailed results for debugging\n    if (vulnerabilities.length > 0) {\n      console.log(`🔍 Vulnerabilities in ${snippet.name}:`, vulnerabilities.map(v => v.title));\n    }\n    \n    return vulnerabilities;\n    \n  } catch (error: any) {\n    console.error(`❌ Failed to analyze ${snippet.name}:`, error);\n    \n    // Handle specific OpenAI API errors\n    if (error?.message?.includes('rate limit')) {\n      throw new Error(`Rate limit exceeded. Please wait a moment and try again.`);\n    } else if (error?.message?.includes('insufficient_quota')) {\n      throw new Error(`OpenAI quota exceeded. Please check your OpenAI billing and usage limits.`);\n    } else if (error?.message?.includes('invalid_api_key')) {\n      throw new Error(`Invalid OpenAI API key. Please check your NEXT_OPENAI_API_KEY environment variable.`);\n    } else if (error?.message?.includes('model_not_found')) {\n      throw new Error(`OpenAI model not found. Please check your model configuration.`);\n    } else {\n      throw new Error(`AI security analysis failed for ${snippet.name}: ${error.message || 'Unknown error occurred'}`);\n    }\n  }\n}\n\n/* ----------------------------\n   fetchRepoFiles: uses git/trees for a single recursive listing\n   ---------------------------- */\nexport async function fetchRepoFiles(owner: string, repo: string, branch = \"master\"): Promise<CodeSnippet[]> {\n  if (!GITHUB_TOKEN) {\n    throw new Error(\"GitHub token not configured. Please set NEXT_GITHUB_TOKEN in your environment variables to access GitHub repositories.\");\n  }\n\n  // Step 1: get the SHA of the branch\n  let branchResp;\n  try {\n    branchResp = await axios.get(`${GITHUB_API}/repos/${owner}/${repo}/branches/${branch}`, {\n      headers: { Authorization: `token ${GITHUB_TOKEN}`, Accept: \"application/vnd.github.v3+json\" },\n      timeout: 10000,\n    });\n  } catch (e: any) {\n    const status = e?.response?.status;\n    if (status === 404) {\n      throw new Error(`Repository '${owner}/${repo}' not found or branch '${branch}' doesn't exist. Please check the repository URL and ensure it's publicly accessible.`);\n    } else if (status === 403) {\n      throw new Error(`Access denied to repository '${owner}/${repo}'. Please check your GitHub token permissions or ensure the repository is public.`);\n    } else if (status === 401) {\n      throw new Error(`GitHub authentication failed. Please check your NEXT_GITHUB_TOKEN environment variable.`);\n    } else if (e.code === 'ENOTFOUND' || e.code === 'ECONNREFUSED') {\n      throw new Error(`Network error: Unable to connect to GitHub. Please check your internet connection.`);\n    } else {\n      throw new Error(`Failed to fetch repository: ${e.message || 'Unknown error occurred'}`);\n    }\n  }\n\n  const commitSha = branchResp.data?.commit?.commit?.tree?.sha || branchResp.data?.commit?.sha;\n  if (!commitSha) {\n    throw new Error(\"Could not locate branch commit SHA.\");\n  }\n\n  // Step 2: get a recursive tree (single call)\n  let treeResp;\n  try {\n    treeResp = await axios.get(`${GITHUB_API}/repos/${owner}/${repo}/git/trees/${commitSha}?recursive=1`, {\n      headers: { Authorization: `token ${GITHUB_TOKEN}`, Accept: \"application/vnd.github.v3+json\" },\n      timeout: 20000,\n    });\n  } catch (e: any) {\n    if (e.code === 'ECONNABORTED') {\n      throw new Error(`Request timeout: The repository is too large or GitHub is responding slowly. Please try again later.`);\n    }\n    throw new Error(`Failed to fetch repository structure: ${e.message || 'Unknown error occurred'}`);\n  }\n\n  const items: any[] = treeResp.data?.tree || [];\n  const ALLOWED_EXT = /\\.(js|ts|py|java|php|rb|go|rs|jsx|tsx|mjs|cjs|env|config|conf|ini|xml|yaml|yml|json|txt)$/i;\n  const IGNORED_PATHS = [/node_modules/, /\\.gitignore/, /package-lock\\.json/, /^dist\\//, /^build\\//, /\\.DS_Store/];\n\n  const candidates = items\n    .filter((it) => it.type === \"blob\")\n    .filter((it) => ALLOWED_EXT.test(it.path) || /\\.env$/i.test(it.path) || /config/i.test(it.path))\n    .filter((it) => !IGNORED_PATHS.some((r) => r.test(it.path)))\n    .slice(0, MAX_FILES);\n\n  // Step 3: download files in limited concurrency\n  const limit = pLimit(BATCH_DOWNLOAD_CONCURRENCY);\n  const downloads = candidates.map((it) =>\n    limit(async (): Promise<CodeSnippet | null> => {\n      try {\n        if (it.size > MAX_FILE_SIZE) {\n          console.warn(`Skipping large file ${it.path} size=${it.size}`);\n          return null;\n        }\n        const rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${it.path}`;\n        const resp = await axios.get<string>(rawUrl, { timeout: 15000, responseType: \"text\", transformResponse: [(v: any) => v] });\n        return {\n          name: it.path,\n          path: it.path,\n          content: resp.data,\n          language: it.path.split(\".\").pop()?.toLowerCase() || \"txt\",\n          size: it.size,\n        };\n      } catch (err: any) {\n        console.warn(`Failed to fetch ${it.path}: ${err?.message || err}`);\n        return null;\n      }\n    })\n  );\n\n  const results = await Promise.all(downloads);\n  const final = results.filter(Boolean) as CodeSnippet[];\n  console.log(`Fetched ${final.length} files from ${owner}/${repo}`);\n  return final;\n}\n\n/* ----------------------------\n   chunkFileIntoRanges: split large files into chunks with line numbers\n   ---------------------------- */\nfunction chunkFileIntoRanges(snippet: CodeSnippet, linesPerChunk = LINES_PER_CHUNK) {\n  const lines = snippet.content.split(/\\r?\\n/);\n  const chunks: { text: string; startLine: number; endLine: number; file: string }[] = [];\n  for (let i = 0; i < lines.length; i += linesPerChunk) {\n    const start = i + 1;\n    const end = Math.min(i + linesPerChunk, lines.length);\n    const text = lines.slice(i, end).join(\"\\n\");\n    chunks.push({ text, startLine: start, endLine: end, file: snippet.name });\n  }\n  return chunks;\n}\n\n/* ----------------------------\n   AI-Powered Security Scan (replaces basic regex patterns)\n   ---------------------------- */\nexport async function cheapPreScan(snippet: CodeSnippet): Promise<Vulnerability[]> {\n  console.log(`🔍 Starting security analysis for ${snippet.name}...`);\n  \n  // Try AI-powered analysis first, fallback to pattern-based if it fails\n  try {\n    console.log(`🤖 Attempting AI security analysis...`);\n    return await analyzeCodeWithAI(snippet);\n  } catch (aiError: any) {\n    console.warn(`⚠️ AI analysis failed for ${snippet.name}: ${aiError.message}`);\n    console.log(`🔍 Falling back to pattern-based security analysis...`);\n    return await fallbackPatternAnalysis(snippet);\n  }\n}\n\n/* ----------------------------\n   Fallback Pattern-Based Security Analysis\n   Used when AI analysis is not available\n   ---------------------------- */\n\nasync function fallbackPatternAnalysis(snippet: CodeSnippet): Promise<Vulnerability[]> {\n  console.log(`🔍 Running pattern-based security analysis on ${snippet.name}`);\n  const vulnerabilities: Vulnerability[] = [];\n  const content = snippet.content.toLowerCase();\n  const lines = snippet.content.split(/\\r?\\n/);\n\n  // SQL Injection patterns\n  const sqlInjectionPatterns = [\n    /\\$\\{[^}]*\\}/g, // Template literals in SQL\n    /[\"'][^\"']*\\+[^\"']*[\"']/g, // String concatenation\n    /query\\s*\\+\\s*[\"']/gi, // Query concatenation\n    /execute\\s*\\([^)]*\\+/gi, // Execute with concatenation\n    /SELECT\\s+.*\\+/gi, // SELECT with concatenation\n    /INSERT\\s+.*\\+/gi, // INSERT with concatenation\n    /UPDATE\\s+.*\\+/gi, // UPDATE with concatenation\n    /DELETE\\s+.*\\+/gi, // DELETE with concatenation\n  ];\n\n  // XSS patterns\n  const xssPatterns = [\n    /innerHTML\\s*=\\s*[^\"']*\\+/gi, // innerHTML with concatenation\n    /document\\.write\\s*\\([^)]*\\+/gi, // document.write with concatenation\n    /\\.html\\s*\\([^)]*\\+/gi, // .html() with concatenation\n    /eval\\s*\\(/gi, // eval() usage\n    /setTimeout\\s*\\([\"'][^\"']*\\+/gi, // setTimeout with string concat\n    /setInterval\\s*\\([\"'][^\"']*\\+/gi, // setInterval with string concat\n  ];\n\n  // Command Injection patterns\n  const commandInjectionPatterns = [\n    /exec\\s*\\([^)]*\\+/gi, // exec with concatenation\n    /spawn\\s*\\([^)]*\\+/gi, // spawn with concatenation\n    /system\\s*\\([^)]*\\+/gi, // system with concatenation\n    /shell_exec\\s*\\([^)]*\\+/gi, // shell_exec with concatenation\n    /passthru\\s*\\([^)]*\\+/gi, // passthru with concatenation\n  ];\n\n  // Hardcoded secrets patterns\n  const secretPatterns = [\n    /(api[_-]?key|apikey)\\s*[:=]\\s*[\"'][^\"']{10,}[\"']/gi,\n    /(secret|password|pwd|pass)\\s*[:=]\\s*[\"'][^\"']{3,}[\"']/gi,\n    /(token|auth[_-]?token)\\s*[:=]\\s*[\"'][^\"']{10,}[\"']/gi,\n    /sk-[a-zA-Z0-9]{20,}/g, // OpenAI API keys\n    /ghp_[a-zA-Z0-9]{36}/g, // GitHub tokens\n    /AIza[a-zA-Z0-9_-]{35}/g, // Google API keys\n    /AKIA[a-zA-Z0-9]{16}/g, // AWS Access Keys\n  ];\n\n  // Path Traversal patterns\n  const pathTraversalPatterns = [\n    /\\.\\.\\/|\\.\\.\\\\/g, // Directory traversal\n    /\\$_GET\\[.*\\].*file/gi, // PHP file inclusion\n    /\\$_POST\\[.*\\].*file/gi, // PHP file inclusion\n    /include\\s*\\([^)]*\\$_/gi, // PHP include with user input\n    /require\\s*\\([^)]*\\$_/gi, // PHP require with user input\n    /readFile\\s*\\([^)]*\\+/gi, // File read with concatenation\n  ];\n\n  // Weak crypto patterns\n  const weakCryptoPatterns = [\n    /md5\\s*\\(/gi, // MD5 usage\n    /sha1\\s*\\(/gi, // SHA1 usage\n    /base64_encode\\s*\\(/gi, // Base64 encoding (not encryption)\n    /DES|3DES|RC4/gi, // Weak encryption algorithms\n  ];\n\n  // Check SQL Injection\n  for (const pattern of sqlInjectionPatterns) {\n    const matches = snippet.content.match(pattern);\n    if (matches) {\n      vulnerabilities.push({\n        severity: \"high\",\n        title: \"Potential SQL Injection\",\n        description: `SQL injection vulnerability detected. The code appears to concatenate user input directly into SQL queries. Found pattern: ${matches[0]}. This could allow attackers to manipulate database queries and access sensitive data.`,\n        file: snippet.name,\n        startLine: findLineNumber(lines, matches[0]),\n        endLine: findLineNumber(lines, matches[0]),\n        fix: \"Use parameterized queries or prepared statements instead of string concatenation. Example: db.query('SELECT * FROM users WHERE id = ?', [userId]);\",\n        confidence: 0.8\n      });\n    }\n  }\n\n  // Check XSS\n  for (const pattern of xssPatterns) {\n    const matches = snippet.content.match(pattern);\n    if (matches) {\n      vulnerabilities.push({\n        severity: \"high\",\n        title: \"Potential Cross-Site Scripting (XSS)\",\n        description: `XSS vulnerability detected. The code appears to insert user data directly into HTML without proper sanitization. Found pattern: ${matches[0]}. This could allow attackers to execute malicious scripts in users' browsers.`,\n        file: snippet.name,\n        startLine: findLineNumber(lines, matches[0]),\n        endLine: findLineNumber(lines, matches[0]),\n        fix: \"Always sanitize user input before inserting into HTML. Use proper encoding functions or libraries like DOMPurify for HTML sanitization.\",\n        confidence: 0.8\n      });\n    }\n  }\n\n  // Check Command Injection\n  for (const pattern of commandInjectionPatterns) {\n    const matches = snippet.content.match(pattern);\n    if (matches) {\n      vulnerabilities.push({\n        severity: \"high\",\n        title: \"Potential Command Injection\",\n        description: `Command injection vulnerability detected. The code appears to execute system commands with user input. Found pattern: ${matches[0]}. This could allow attackers to execute arbitrary commands on the server.`,\n        file: snippet.name,\n        startLine: findLineNumber(lines, matches[0]),\n        endLine: findLineNumber(lines, matches[0]),\n        fix: \"Avoid executing system commands with user input. If necessary, use whitelisting and proper input validation. Consider using safer alternatives or libraries.\",\n        confidence: 0.9\n      });\n    }\n  }\n\n  // Check Hardcoded Secrets\n  for (const pattern of secretPatterns) {\n    const matches = snippet.content.match(pattern);\n    if (matches) {\n      vulnerabilities.push({\n        severity: \"high\",\n        title: \"Hardcoded Secrets Detected\",\n        description: `Hardcoded secrets or credentials found in the code. This is a critical security issue as sensitive information should never be stored in source code. Detected: ${matches[0].substring(0, 30)}...`,\n        file: snippet.name,\n        startLine: findLineNumber(lines, matches[0]),\n        endLine: findLineNumber(lines, matches[0]),\n        fix: \"Move all secrets to environment variables or a secure secrets management system. Use process.env.SECRET_NAME to access them at runtime.\",\n        confidence: 0.95\n      });\n    }\n  }\n\n  // Check Path Traversal\n  for (const pattern of pathTraversalPatterns) {\n    const matches = snippet.content.match(pattern);\n    if (matches) {\n      vulnerabilities.push({\n        severity: \"medium\",\n        title: \"Potential Path Traversal\",\n        description: `Path traversal vulnerability detected. The code may allow access to files outside the intended directory. Found pattern: ${matches[0]}. This could lead to unauthorized file access.`,\n        file: snippet.name,\n        startLine: findLineNumber(lines, matches[0]),\n        endLine: findLineNumber(lines, matches[0]),\n        fix: \"Validate and sanitize all file paths. Use path.resolve() and path.basename() to prevent directory traversal. Implement proper access controls.\",\n        confidence: 0.7\n      });\n    }\n  }\n\n  // Check Weak Crypto\n  for (const pattern of weakCryptoPatterns) {\n    const matches = snippet.content.match(pattern);\n    if (matches) {\n      vulnerabilities.push({\n        severity: \"medium\",\n        title: \"Weak Cryptographic Algorithm\",\n        description: `Weak cryptographic algorithm detected: ${matches[0]}. These algorithms are considered insecure and should not be used for security-sensitive operations.`,\n        file: snippet.name,\n        startLine: findLineNumber(lines, matches[0]),\n        endLine: findLineNumber(lines, matches[0]),\n        fix: \"Use strong cryptographic algorithms like SHA-256, AES, or bcrypt. For password hashing, use bcrypt, scrypt, or Argon2.\",\n        confidence: 0.9\n      });\n    }\n  }\n\n  console.log(`✅ Pattern-based analysis complete: ${vulnerabilities.length} vulnerabilities found in ${snippet.name}`);\n  return vulnerabilities;\n}\n\n// Helper function to find line number of a pattern match\nfunction findLineNumber(lines: string[], pattern: string): number {\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes(pattern.substring(0, 20))) {\n      return i + 1;\n    }\n  }\n  return 1;\n}\n\n/* ----------------------------\n   Intelligent Dual-Engine Security Analysis (AI + Semgrep)\n   No hardcoded patterns - Pure AI intelligence\n   ---------------------------- */\nexport async function scanRepoFiles(snippets: CodeSnippet[], useEnhancedScan: boolean = true): Promise<ScanResult[]> {\n  if (!OPENAI_KEY) {\n    throw new Error(\"🚨 OpenAI API key required for security analysis. This scanner relies on AI intelligence, not hardcoded patterns.\");\n  }\n\n  const startTime = Date.now();\n  console.log(`🚀 OPTIMIZED: Starting performance-tuned security analysis of ${snippets.length} files...`);\n\n  console.log(`�️ Starting intelligent security analysis of ${snippets.length} files...`);\n  console.log(`🔧 Analysis engines: ${useEnhancedScan ? 'AI + Semgrep (Enhanced)' : 'AI Only'}`);\n\n  // Quick pre-filter for obviously safe files to improve performance\n  const relevantFiles = snippets.filter(s => {\n    // Skip documentation and non-code files\n  if (/\\.(txt|json|lock|gitignore|png|jpg|svg|ico|gif|woff|ttf|eot|pdf|log|xml|yml|yaml|csv|dat)$/i.test(s.name)) return false;\n    \n    // Skip specific non-security files\n    if (/^(readme|license|changelog|contributing|code_of_conduct|package-lock|yarn\\.lock|gemfile\\.lock)/i.test(s.name)) return false;\n    \n    // Skip oversized files (likely minified or binary)\n    if (s.size && s.size > MAX_FILE_SIZE) return false;\n    \n    // Only include actual code files that need security analysis\n    const codeFilePattern = /\\.(js|ts|jsx|tsx|py|java|php|rb|go|rs|c|cpp|cs|scala|kt|swift|dart|sh|bash|zsh|ps1|sql|pl|r|m|mm|h|hpp|cc|cxx)$/i;\n    return codeFilePattern.test(s.name);\n  });\n\n  console.log(`📊 Filtered to ${relevantFiles.length} relevant files for analysis`);\n\n  // Smart Semgrep usage - skip for very large repositories to save time\n  const shouldUseSemgrep = useEnhancedScan && relevantFiles.length <= 25;\n  if (useEnhancedScan && !shouldUseSemgrep) {\n    console.log(`⚡ Skipping Semgrep for large repository (${relevantFiles.length} files) - using AI-only for speed`);\n  }\n\n  // PARALLEL EXECUTION: Run both analyses simultaneously\n  const analysisPromises = [];\n\n  // 1. Optimized AI Analysis (always runs)\n  console.log(`🤖 Starting optimized batch AI analysis...`);\n  const aiAnalysisPromise = analyzeAllFilesWithAI(relevantFiles);\n  analysisPromises.push(aiAnalysisPromise);\n\n  // 2. Smart Semgrep Analysis (only for smaller repositories)\n  let semgrepPromise: Promise<SemgrepFinding[]> = Promise.resolve([]);\n  if (shouldUseSemgrep) {\n    console.log(`⚡ Starting parallel Semgrep analysis on ${relevantFiles.length} files...`);\n    semgrepPromise = runFullSemgrepAnalysis(relevantFiles);\n    analysisPromises.push(semgrepPromise);\n  }\n\n  // Wait for both analyses to complete\n  const [aiResults, semgrepFindings] = await Promise.all([\n    aiAnalysisPromise,\n    semgrepPromise\n  ]);\n\n  // INTELLIGENT MERGE: Combine results with deduplication\n  const finalResults = mergeIntelligentFindings(aiResults, semgrepFindings);\n\n  const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);\n  console.log(`✅ OPTIMIZED: Analysis complete in ${elapsed}s`);\n  console.log(`📊 Results: AI found ${aiResults.length} files, Semgrep found ${semgrepFindings.length} findings`);\n  console.log(`🎯 Final: ${finalResults.length} files with security issues identified`);\n  \n  return finalResults;\n}\n\n/* ----------------------------\n   PERFORMANCE OPTIMIZED AI Analysis - Batch Processing\n   ---------------------------- */\nasync function analyzeAllFilesWithAI(snippets: CodeSnippet[]): Promise<ScanResult[]> {\n  // Smart pre-filtering for performance\n  const criticalFiles = filterCriticalFiles(snippets);\n  \n  console.log(`🚀 OPTIMIZED: Analyzing ${criticalFiles.length}/${snippets.length} critical files`);\n  \n  if (criticalFiles.length === 0) {\n    console.log(\"✅ No critical files found for AI analysis\");\n    return [];\n  }\n\n  // Batch files for more efficient API usage\n  return await batchAnalyzeWithAI(criticalFiles);\n}\n\n/* ----------------------------\n   Smart File Filtering - Skip non-security-relevant files\n   ---------------------------- */\nfunction filterCriticalFiles(snippets: CodeSnippet[]): CodeSnippet[] {\n  const SKIP_FILES = /\\.(txt|json|lock|png|jpg|gif|ico|svg|woff|ttf|eot|pdf|zip|tar|gz|log|bak|tmp|xml|yml|yaml|csv|dat)$/i;\n  const PRIORITY_FILES = /\\.(js|ts|py|php|java|rb|go|jsx|tsx|vue|swift|kt|scala|cs|cpp|c|h|sql|sh)$/i;\n  \n  return snippets.filter(snippet => {\n    // Skip obviously safe files\n    if (SKIP_FILES.test(snippet.name)) return false;\n    \n    // Skip huge files (likely to be minified or generated)\n    if (snippet.size && snippet.size > 100000) return false;\n    \n    // Skip tiny files unless they're priority types\n    if (snippet.size && snippet.size < 50 && !PRIORITY_FILES.test(snippet.name)) return false;\n    \n    // Include if it's a priority file type\n    if (PRIORITY_FILES.test(snippet.name)) return true;\n    \n    // Include if content suggests security relevance\n    const securityKeywords = ['password', 'secret', 'key', 'token', 'auth', 'eval(', 'exec(', 'SELECT ', 'INSERT ', 'DELETE ', 'UPDATE '];\n    const hasSecurityKeywords = securityKeywords.some(keyword => \n      snippet.content.toLowerCase().includes(keyword.toLowerCase())\n    );\n    \n    return hasSecurityKeywords;\n  });\n}\n\n/* ----------------------------\n   Batch AI Analysis - Multiple files per API call\n   ---------------------------- */\nasync function batchAnalyzeWithAI(snippets: CodeSnippet[]): Promise<ScanResult[]> {\n  const BATCH_SIZE = 3; // Analyze 3 files per AI call for efficiency\n  const batches: CodeSnippet[][] = [];\n  \n  // Create batches of files\n  for (let i = 0; i < snippets.length; i += BATCH_SIZE) {\n    batches.push(snippets.slice(i, i + BATCH_SIZE));\n  }\n\n  console.log(`🔄 Processing ${batches.length} batches (${BATCH_SIZE} files each)`);\n\n  // Process batches with reduced concurrency for stability\n  const limit = pLimit(2); // Reduced for better performance and rate limit compliance\n  const allResults: ScanResult[] = [];\n\n  const batchPromises = batches.map((batch, batchIndex) =>\n    limit(async () => {\n      try {\n        console.log(`📦 Processing batch ${batchIndex + 1}/${batches.length}`);\n        const batchResults = await analyzeBatchWithAI(batch);\n        return batchResults;\n      } catch (error) {\n        console.error(`❌ Batch ${batchIndex + 1} analysis failed:`, error);\n        return [];\n      }\n    })\n  );\n\n  const allBatchResults = await Promise.all(batchPromises);\n  return allBatchResults.flat();\n}\n\n/* ----------------------------\n   Single Batch AI Analysis - Analyzes multiple files in one API call\n   ---------------------------- */\nasync function analyzeBatchWithAI(batch: CodeSnippet[]): Promise<ScanResult[]> {\n  if (!OPENAI_KEY) return [];\n\n  const model = new ChatOpenAI({\n    model: OPENAI_MODEL,\n    temperature: 0,\n    openAIApiKey: OPENAI_KEY,\n  });\n\n  // Create combined prompt for multiple files\n  const filesContent = batch.map((snippet, idx) => \n    `FILE_${idx + 1}: ${snippet.name}\nLanguage: ${snippet.language}\n\\`\\`\\`${snippet.language}\n${snippet.content.slice(0, 8000)} ${snippet.content.length > 8000 ? '... (truncated)' : ''}\n\\`\\`\\`\n`).join('\\n' + '='.repeat(50) + '\\n');\n\n  const batchPrompt = `You are an elite cybersecurity expert. Analyze these ${batch.length} files for security vulnerabilities.\n\nFor each file that has vulnerabilities, return them in this EXACT JSON structure:\n{\n  \"results\": {\n    \"${batch[0].name}\": [\n      {\n        \"severity\": \"low|medium|high\",\n        \"title\": \"Vulnerability name (max 50 chars)\",\n        \"description\": \"Detailed explanation of the vulnerability and how it can be exploited\",\n        \"startLine\": line_number,\n        \"endLine\": line_number,\n        \"fix\": \"Complete secure code example or detailed fix instructions\",\n        \"confidence\": confidence_score_0_to_1\n      }\n    ],\n    \"${batch[1]?.name || 'file2.ext'}\": [],\n    \"${batch[2]?.name || 'file3.ext'}\": []\n  }\n}\n\nCRITICAL: \n- Return ONLY the JSON object, no extra text\n- If a file has no vulnerabilities, use empty array []\n- Focus on: SQL Injection, XSS, Command Injection, Hardcoded Secrets, Path Traversal, Code Injection, Weak Crypto\n\nFILES TO ANALYZE:\n${filesContent}`;\n\n  try {\n    const response = await model.invoke(batchPrompt);\n    const aiResponse = response.content as string;\n    \n    // Clean and parse AI response\n    let jsonStr = aiResponse.trim();\n    if (jsonStr.startsWith('```')) {\n      jsonStr = jsonStr.replace(/```[a-z]*\\n?/g, '').replace(/```$/g, '');\n    }\n    \n    const batchResults = JSON.parse(jsonStr);\n    const scanResults: ScanResult[] = [];\n    \n    // Convert batch results to ScanResult format\n    const results = batchResults.results || batchResults;\n    for (const [fileName, vulnerabilities] of Object.entries(results)) {\n      if (Array.isArray(vulnerabilities) && vulnerabilities.length > 0) {\n        const formattedVulns = vulnerabilities.map((v: any) => ({\n          severity: v.severity === 'critical' ? 'high' : (v.severity || \"medium\") as \"low\" | \"medium\" | \"high\",\n          title: v.title || \"Security Issue Detected\",\n          description: v.description || \"AI identified a potential security vulnerability\",\n          file: fileName,\n          startLine: v.startLine || 1,\n          endLine: v.endLine || v.startLine || 1,\n          fix: v.fix || \"Review code for security improvements\",\n          confidence: v.confidence || 0.85\n        }));\n        \n        scanResults.push({\n          file: fileName,\n          vulnerabilities: formattedVulns\n        });\n      }\n    }\n    \n    console.log(`✅ Batch analysis: ${scanResults.length} files with vulnerabilities found`);\n    return scanResults;\n    \n  } catch (error) {\n    console.error(`❌ Batch AI analysis failed:`, error);\n    // Fallback to individual analysis if batch fails\n    console.log(`🔄 Falling back to individual file analysis for batch`);\n    return await fallbackIndividualAnalysis(batch);\n  }\n}\n\n/* ----------------------------\n   Fallback Individual Analysis - Used when batch analysis fails\n   ---------------------------- */\nasync function fallbackIndividualAnalysis(batch: CodeSnippet[]): Promise<ScanResult[]> {\n  const results: ScanResult[] = [];\n  \n  for (const snippet of batch) {\n    try {\n      const vulnerabilities = await analyzeCodeWithAI(snippet);\n      if (vulnerabilities.length > 0) {\n        results.push({ file: snippet.name, vulnerabilities });\n      }\n    } catch (error) {\n      console.error(`❌ Individual analysis failed for ${snippet.name}:`, error);\n    }\n  }\n  \n  return results;\n}\n\n/* ----------------------------\n   Semgrep Analysis Engine - Professional static analysis\n   ---------------------------- */\nasync function runFullSemgrepAnalysis(snippets: CodeSnippet[]): Promise<SemgrepFinding[]> {\n  try {\n    // Create temporary directory with all repository files\n    const tempDir = await createTempRepoDir(snippets);\n    \n    // Run comprehensive Semgrep analysis\n    const semgrepFindings = await runSemgrepAnalysis(tempDir);\n    \n    console.log(`🔍 Semgrep analysis complete: ${semgrepFindings.length} findings`);\n    return semgrepFindings;\n    \n  } catch (error) {\n    console.error(`❌ Semgrep analysis failed:`, error);\n    throw error; // No fallback - fail fast\n  }\n}\n\n/* ----------------------------\n   Intelligent Results Merger - Combines AI + Semgrep with smart deduplication\n   ---------------------------- */\nfunction mergeIntelligentFindings(aiResults: ScanResult[], semgrepFindings: SemgrepFinding[]): ScanResult[] {\n  const mergedResults = new Map<string, ScanResult>();\n\n  // Add all AI findings first\n  for (const result of aiResults) {\n    mergedResults.set(result.file, result);\n  }\n\n  // Integrate Semgrep findings\n  for (const semgrepFinding of semgrepFindings) {\n    // Find matching file\n    const fileName = semgrepFinding.file.split('/').pop() || semgrepFinding.file;\n    const matchingFile = Array.from(mergedResults.keys()).find(key => \n      key.endsWith(fileName) || key === semgrepFinding.file\n    ) || fileName;\n\n    // Convert Semgrep finding to Vulnerability format\n    const semgrepVuln: Vulnerability = {\n      severity: mapSemgrepSeverity(semgrepFinding.severity),\n      title: formatSemgrepTitle(semgrepFinding.issue),\n      description: semgrepFinding.description,\n      file: matchingFile,\n      startLine: semgrepFinding.line,\n      endLine: semgrepFinding.line,\n      fix: semgrepFinding.secure_code_fix,\n      confidence: 0.95 // Semgrep has high confidence\n    };\n\n    // Add or merge with existing results\n    if (mergedResults.has(matchingFile)) {\n      const existing = mergedResults.get(matchingFile)!;\n      \n      // Check for duplicates (same vulnerability type and line)\n      const isDuplicate = existing.vulnerabilities.some(v => \n        v.title === semgrepVuln.title && \n        Math.abs((v.startLine || 0) - (semgrepVuln.startLine || 0)) <= 2\n      );\n\n      if (!isDuplicate) {\n        existing.vulnerabilities.push(semgrepVuln);\n      }\n    } else {\n      mergedResults.set(matchingFile, {\n        file: matchingFile,\n        vulnerabilities: [semgrepVuln]\n      });\n    }\n  }\n\n  return Array.from(mergedResults.values());\n}\n\n\nfunction mapSemgrepSeverity(severity: string): \"low\" | \"medium\" | \"high\" {\n  const severityMap: Record<string, \"low\" | \"medium\" | \"high\"> = {\n    'ERROR': 'high',\n    'WARNING': 'medium', \n    'INFO': 'low',\n    'HIGH': 'high',\n    'MEDIUM': 'medium',\n    'LOW': 'low'\n  };\n  return severityMap[severity.toUpperCase()] || 'medium';\n}\n\nfunction formatSemgrepTitle(issue: string): string {\n  return issue\n    .replace(/_/g, ' ')\n    .replace(/\\b\\w/g, l => l.toUpperCase())\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n\nasync function createTempRepoDir(snippets: CodeSnippet[]): Promise<string> {\n  const fs = await import('fs/promises');\n  const os = await import('os');\n  const path = await import('path');\n  \n  \n  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'semgrep-scan-'));\n  \n  \n  for (const snippet of snippets) {\n    const filePath = path.join(tempDir, snippet.name);\n    const dirPath = path.dirname(filePath);\n    \n    \n    await fs.mkdir(dirPath, { recursive: true });\n    \n    \n    await fs.writeFile(filePath, snippet.content, 'utf8');\n  }\n  \n  console.log(`📁 Created temporary repository at ${tempDir}`);\n  return tempDir;\n}\n\n\nexport async function debugEnvironment() {\n  return {\n    hasGithubToken: !!GITHUB_TOKEN,\n    hasOpenAiKey: !!OPENAI_KEY,\n    githubApi: GITHUB_API,\n    openaiModel: OPENAI_MODEL,\n    githubTokenPreview: GITHUB_TOKEN ? `${GITHUB_TOKEN.substring(0, 10)}...` : \"Not set\",\n    openaiKeyPreview: OPENAI_KEY ? `${OPENAI_KEY.substring(0, 10)}...` : \"Not set\"\n  };\n}\n\n\nexport async function checkCodeSecurity(code: string): Promise<{ \n  isSecure: boolean; \n  vulnerabilities: Vulnerability[] \n}> {\n  const snippet: CodeSnippet = {\n    name: \"input.js\",\n    path: \"input.js\",\n    content: code,\n    language: \"javascript\",\n    size: code.length\n  };\n  \n  const vulnerabilities = await cheapPreScan(snippet);\n  return {\n    isSecure: vulnerabilities.length === 0,\n    vulnerabilities\n  };\n}\n\nexport async function scanVulnerability(code: string): Promise<VulnerabilityCardContentType & { correctCode: string }> {\n  console.log(\"🔍 scanVulnerability called with code length:\", code.length);\n  console.log(\"🔑 Environment check - OPENAI_KEY exists:\", !!OPENAI_KEY);\n  console.log(\"🔑 Environment check - GITHUB_TOKEN exists:\", !!GITHUB_TOKEN);\n  \n  const snippet: CodeSnippet = {\n    name: \"temp.js\",\n    path: \"temp.js\", \n    content: code,\n    language: \"javascript\",\n    size: code.length\n  };\n  \n  const vulnerabilities = await cheapPreScan(snippet);\n  console.log(\"📋 Found vulnerabilities:\", vulnerabilities.length);\n  \n  if (vulnerabilities.length === 0) {\n    return {\n      riskLevel: \"low\",\n      riskTitle: \"No Issues Found\", \n      riskDescription: \"The code appears to be secure based on our analysis.\",\n      correctCode: code\n    };\n  }\n  \n  const highestSeverity = vulnerabilities.reduce((highest, curr) => {\n    const severityOrder = { low: 1, medium: 2, high: 3 };\n    return severityOrder[curr.severity] > severityOrder[highest.severity] ? curr : highest;\n  });\n  \n\n  const secureCodeFix = generateSecureCodeFix(code, highestSeverity);\n  \n  return {\n    riskLevel: highestSeverity.severity,\n    riskTitle: highestSeverity.title,\n    riskDescription: getDetailedDescription(highestSeverity, code),\n    correctCode: secureCodeFix\n  };\n}\n\nfunction getDetailedDescription(vulnerability: Vulnerability, originalCode: string): string {\n  const descriptions: Record<string, string> = {\n    \"hardcoded_secrets\": `This code contains hardcoded sensitive information (API keys, passwords, tokens, or secrets) directly in the source code. This is a critical security vulnerability because:\n\n• Secrets are visible to anyone with access to the code\n• Version control systems store these secrets permanently  \n• Deployed applications expose secrets in plain text\n• Attackers can extract and misuse these credentials\n\nThe detected pattern suggests sensitive data is embedded directly in the code rather than being loaded from secure environment variables or a secrets management system.`,\n\n    \"sql_string_interp\": `This code uses string interpolation to build SQL queries, making it vulnerable to SQL injection attacks. This occurs when user input is directly concatenated into SQL statements without proper sanitization:\n\n• Attackers can inject malicious SQL code through input parameters\n• Database contents can be read, modified, or deleted\n• Administrative access to the database may be compromised\n• Application logic can be bypassed\n\nThe vulnerability allows attackers to manipulate the SQL query structure by providing specially crafted input values.`,\n\n    \"eval_os_system\": `This code uses dynamic code execution functions (eval, system, exec) which can lead to remote code execution vulnerabilities:\n\n• Attackers can execute arbitrary code on the server\n• System commands can be injected and executed\n• Full system compromise is possible\n• Application sandbox can be escaped\n\nThese functions should never process untrusted input as they interpret and execute the input as code or system commands.`,\n\n    \"weak_hash\": `This code uses cryptographically weak hashing algorithms (MD5, SHA1) that are vulnerable to collision attacks and rainbow table lookups:\n\n• MD5 and SHA1 are considered broken for security purposes\n• Modern hardware can compute billions of hashes per second\n• Precomputed hash tables (rainbow tables) exist for common inputs\n• Collisions can be generated with reasonable computational effort\n\nFor security-sensitive applications, use stronger algorithms like SHA-256, SHA-3, or bcrypt for password hashing.`,\n\n    \"path_traversal\": `This code appears to be vulnerable to path traversal attacks, where attackers can access files outside the intended directory:\n\n• Users can provide paths with \"../\" sequences to navigate up directories\n• Sensitive system files may be accessible\n• Application configuration files could be exposed\n• The vulnerability can lead to information disclosure or code execution\n\nFile operations should validate and sanitize all path inputs to prevent directory traversal.\n\nIf no issues are found return []`\n  };\n\n  return descriptions[vulnerability.title] || vulnerability.description;\n}\n\nfunction generateSecureCodeFix(originalCode: string, vulnerability: Vulnerability): string {\n  const fixes: Record<string, (code: string) => string> = {\n    \"hardcoded_secrets\": (code: string) => {\n      let fixedCode = code;\n      \n      const patterns = [\n        { pattern: /(API_KEY|SECRET|PASSWORD|TOKEN)\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: '$1 = process.env.$1 || \"\"' },\n        { pattern: /apiKey\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: 'apiKey = process.env.API_KEY || \"\"' },\n        { pattern: /password\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: 'password = process.env.PASSWORD || \"\"' }\n      ];\n      \n      patterns.forEach(({ pattern, replacement }) => {\n        fixedCode = fixedCode.replace(pattern, replacement);\n      });\n      \n      if (!fixedCode.includes('require(\"dotenv\")') && !fixedCode.includes('import dotenv')) {\n        fixedCode = 'require(\"dotenv\").config();\\n\\n' + fixedCode;\n      }\n      \n      return `// ✅ Secure version - uses environment variables\n${fixedCode}\n\n// Add to your .env file:\n// API_KEY=your_actual_api_key_here\n// PASSWORD=your_actual_password_here`;\n    },\n\n    \"sql_string_interp\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(\n        /SELECT.*FROM.*WHERE.*\\$\\{.*\\}/gi,\n        'SELECT * FROM users WHERE id = ?'\n      );\n      \n      return `// ✅ Secure version - uses parameterized queries\n${fixedCode}\n\n// Example with proper parameterization:\n// const query = 'SELECT * FROM users WHERE id = ? AND name = ?';\n// const results = await db.query(query, [userId, userName]);`;\n    },\n\n    \"eval_os_system\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(/eval\\s*\\([^)]+\\)/gi, '// eval() removed - use safer alternatives');\n      fixedCode = fixedCode.replace(/os\\.system\\s*\\([^)]+\\)/gi, '// os.system() removed - use subprocess with validation');\n      fixedCode = fixedCode.replace(/system\\s*\\([^)]+\\)/gi, '// system() removed - use safer alternatives');\n      \n      return `// ✅ Secure version - removes dynamic code execution\n${fixedCode}\n\n// Safe alternatives:\n// - Instead of eval(): use JSON.parse() for data, or a proper parser\n// - Instead of system(): use child_process.spawn() with input validation`;\n    },\n\n    \"weak_hash\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(/md5\\s*\\(/gi, 'crypto.createHash(\"sha256\")');\n      fixedCode = fixedCode.replace(/sha1\\s*\\(/gi, 'crypto.createHash(\"sha256\")');\n      \n      return `// ✅ Secure version - uses strong hashing\nconst crypto = require('crypto');\n${fixedCode}\n\n// For password hashing, use bcrypt:\n// const bcrypt = require('bcrypt');\n// const hashedPassword = await bcrypt.hash(password, 12);`;\n    },\n\n    \"path_traversal\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(\n        /(open\\s*\\(|fs\\.readFileSync\\s*\\(|readFile\\s*\\()[^,)]+/gi,\n        '$1path.resolve(SAFE_DIR, path.basename(filename))'\n      );\n      \n      return `// ✅ Secure version - validates file paths\nconst path = require('path');\nconst SAFE_DIR = '/safe/directory';\n\n${fixedCode}\n\n// Additional security measures:\n// - Use path.resolve() and path.basename() to sanitize paths  \n// - Define an allowed directory and never go outside it`;\n    }\n  };\n\n  const fixFunction = fixes[vulnerability.title];\n  if (fixFunction) {\n    return fixFunction(originalCode);\n  }\n  \n  return `// ✅ Secure version\n${originalCode}\n\n// General security recommendations:\n// - Validate and sanitize all inputs\n// - Use environment variables for secrets\n// - Apply principle of least privilege`;\n}\n\n/* ----------------------------\n   Enhanced repository scanning with Semgrep\n   ---------------------------- */\nexport async function scanRepository(owner: string, repo: string): Promise<ScanResult[]> {\n  const files = await fetchRepoFiles(owner, repo);\n  return await scanRepoFiles(files, true); // Enable enhanced scanning\n}\n\n/* ----------------------------\n   Example server handler usage (Next.js / Express)\n   ---------------------------- */\nexport async function handleScanRequest(req: any, res: any) {\n  try {\n    const { owner, repo, branch, enhanced = true } = req.body || req.query;\n    if (!owner || !repo) return res.status(400).json({ error: \"owner & repo required\" });\n\n    const files = await fetchRepoFiles(owner, repo, branch || \"main\");\n    if (!files.length) return res.status(200).json({ results: [] });\n\n    const results = await scanRepoFiles(files, enhanced);\n    return res.status(200).json({ \n      results, \n      scannedFiles: files.length,\n      enhancedScanEnabled: enhanced && !!OPENAI_KEY\n    });\n  } catch (err: any) {\n    console.error(\"scan error:\", err?.message || err);\n    return res.status(500).json({ error: err?.message || \"scan failed\" });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;IAuCsB;IAiOA;IAyGA;IA6MA;IAqYA;IAYA;IAmBA;IA2MA;IAQA","debugId":null}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanjithm/hunter-ai/src/components/repo-header.tsx"],"sourcesContent":["// The header to be shown on the page where the repo scanning is happening.\n\nimport { HomeIcon } from \"lucide-react\";\nimport React from \"react\";\nimport { Button } from \"./ui/button\";\nimport Link from \"next/link\";\n\nfunction RepoHeader({ owner, repo }: { owner: string; repo: string }) {\n  return (\n    <header className=\"mb-8 border-b pb-6  flex items-center gap-10 max-w-7xl mx-auto\">\n      <Link href={\"/\"}>\n        <Button variant={\"outline\"} className=\"cursor-pointer\">\n          <HomeIcon className=\" text-gray-600\" />\n        </Button>\n      </Link>\n      <div>\n        <div className=\"flex items-baseline gap-3\">\n          <h1 className=\"text-2xl font-medium text-gray-900\">\n            <span className=\"font-mono text-gray-600\">{owner}</span>\n            <span className=\"mx-2 text-gray-400\">/</span>\n            <span className=\"font-semibold text-gray-800\">{repo}</span>\n          </h1>\n          <span className=\"text-sm text-gray-400\">Code Analysis</span>\n        </div>\n        <p className=\"mt-2 text-gray-500 text-sm\">\n          Public repository security audit report\n        </p>\n      </div>\n    </header>\n  );\n}\n\nexport default RepoHeader;\n"],"names":[],"mappings":"AAAA,2EAA2E;;;;;AAE3E;AAEA;AACA;;;;;AAEA,SAAS,WAAW,EAAE,KAAK,EAAE,IAAI,EAAmC;IAClE,qBACE,6LAAC;QAAO,WAAU;;0BAChB,6LAAC,+JAAA,CAAA,UAAI;gBAAC,MAAM;0BACV,cAAA,6LAAC,qIAAA,CAAA,SAAM;oBAAC,SAAS;oBAAW,WAAU;8BACpC,cAAA,6LAAC,0MAAA,CAAA,WAAQ;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAGxB,6LAAC;;kCACC,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC;wCAAK,WAAU;kDAA2B;;;;;;kDAC3C,6LAAC;wCAAK,WAAU;kDAAqB;;;;;;kDACrC,6LAAC;wCAAK,WAAU;kDAA+B;;;;;;;;;;;;0CAEjD,6LAAC;gCAAK,WAAU;0CAAwB;;;;;;;;;;;;kCAE1C,6LAAC;wBAAE,WAAU;kCAA6B;;;;;;;;;;;;;;;;;;AAMlD;KAvBS;uCAyBM","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanjithm/hunter-ai/src/components/ui/tooltip.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"],"names":[],"mappings":";;;;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,gBAAgB,EACvB,gBAAgB,CAAC,EACjB,GAAG,OACoD;IACvD,qBACE,6LAAC,sKAAA,CAAA,WAAyB;QACxB,aAAU;QACV,eAAe;QACd,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,QAAQ,EACf,GAAG,OACgD;IACnD,qBACE,6LAAC;kBACC,cAAA,6LAAC,sKAAA,CAAA,OAAqB;YAAC,aAAU;YAAW,GAAG,KAAK;;;;;;;;;;;AAG1D;MARS;AAUT,SAAS,eAAe,EACtB,GAAG,OACmD;IACtD,qBAAO,6LAAC,sKAAA,CAAA,UAAwB;QAAC,aAAU;QAAmB,GAAG,KAAK;;;;;;AACxE;MAJS;AAMT,SAAS,eAAe,EACtB,SAAS,EACT,aAAa,CAAC,EACd,QAAQ,EACR,GAAG,OACmD;IACtD,qBACE,6LAAC,sKAAA,CAAA,SAAuB;kBACtB,cAAA,6LAAC,sKAAA,CAAA,UAAwB;YACvB,aAAU;YACV,YAAY;YACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wXACA;YAED,GAAG,KAAK;;gBAER;8BACD,6LAAC,sKAAA,CAAA,QAAsB;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI1C;MAtBS","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanjithm/hunter-ai/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\"flex flex-col gap-1.5 px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,0BAA0B;QACvC,GAAG,KAAK;;;;;;AAGf;MARS","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanjithm/hunter-ai/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col gap-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        \"bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/50 inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,KAAK,EACZ,SAAS,EACT,GAAG,OAC6C;IAChD,qBACE,6LAAC,mKAAA,CAAA,OAAkB;QACjB,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,uBAAuB;QACpC,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OAC6C;IAChD,qBACE,6LAAC,mKAAA,CAAA,OAAkB;QACjB,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uGACA;QAED,GAAG,KAAK;;;;;;AAGf;MAdS;AAgBT,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,6LAAC,mKAAA,CAAA,UAAqB;QACpB,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,mnBACA;QAED,GAAG,KAAK;;;;;;AAGf;MAdS;AAgBT,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,6LAAC,mKAAA,CAAA,UAAqB;QACpB,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,uBAAuB;QACpC,GAAG,KAAK;;;;;;AAGf;MAXS","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanjithm/hunter-ai/src/components/vulnerability-card.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { cn } from \"@/lib/utils\";\nimport { Check, Copy, Cross, Loader2Icon, XIcon } from \"lucide-react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { atomOneLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport { Button } from \"./ui/button\";\n\nfunction VulnerabilityCard({\n  riskDescription,\n  riskLevel,\n  riskTitle,\n  correctCode,\n  setOpenCard,\n  codeLanguage,\n  vulnerabilityCardLoading,\n  codeFileName,\n  setSelectedSnippetIndex,\n}: VulnerabilityCardProps & {\n  setSelectedSnippetIndex: React.Dispatch<React.SetStateAction<number | null>>;\n}) {\n  const [selectedTab, setSelectedTab] = useState(\"description\");\n  const [copied, setCopied] = useState<\"pass\" | \"fail\" | null>(null);\n\n  return (\n    <Card className=\"w-1/2  p-6 bg-white rounded-xl shadow-sm border border-gray-200 h-fit  max-h-svh overflow-scroll sticky top-2\">\n      <div className=\"absolute right-4 top-4\">\n        <XIcon\n          className=\"h-4 w-4 text-gray-400 hover:text-gray-600 cursor-pointer\"\n          onClick={() => {\n            if (setOpenCard) {\n              setOpenCard(false);\n              setSelectedSnippetIndex(null);\n            }\n          }}\n        />\n      </div>\n      <CardContent className=\"space-y-4 \">\n        <div className=\"flex justify-between items-center\">\n          {/* Tab Selector */}\n          <Tabs\n            defaultValue=\"description\"\n            onValueChange={setSelectedTab}\n            className=\"mb-2\"\n          >\n            {codeFileName && (\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-6 h-6 rounded-md bg-gray-100 flex items-center justify-center\">\n                  <span className=\"text-sm\">📄</span>\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-medium text-gray-800 text-sm\">\n                    {codeFileName?.split(\"/\").pop()}\n                  </div>\n                  <div className=\"text-xs text-gray-400 font-mono mt-1\">\n                    {/* File name */}\n                    {codeFileName}\n                  </div>\n                </div>\n              </div>\n            )}\n            <TabsList className=\"flex space-x-2 bg-transparent p-0\">\n              <TabsTrigger\n                value=\"description\"\n                className=\"px-3 py-1.5 text-sm font-medium rounded-lg \n                data-[state=active]:bg-gray-50 data-[state=active]:text-gray-900\n                text-gray-500 hover:text-gray-700 transition-colors\"\n                disabled={vulnerabilityCardLoading}\n              >\n                Description\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"code\"\n                className=\"px-3 py-1.5 text-sm font-medium rounded-lg \n                data-[state=active]:bg-gray-50 data-[state=active]:text-gray-900\n                text-gray-500 hover:text-gray-700 transition-colors\"\n                disabled={vulnerabilityCardLoading}\n              >\n                Secure Code\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n          {selectedTab === \"code\" && (\n            <Button\n              variant={\"outline\"}\n              className=\"cursor-pointer\"\n              onClick={async () => {\n                try {\n                  // Copy the corrected code to the clipboard\n                  await navigator.clipboard.writeText(correctCode);\n                  setCopied(\"pass\");\n                } catch (error: unknown) {\n                  setCopied(\"fail\");\n                  console.error(\"Failed to copy:\", error);\n                } finally {\n                  const timeoutId = setTimeout(() => setCopied(null), 2000);\n                  return () => clearTimeout(timeoutId);\n                }\n              }}\n            >\n              {copied === null ? (\n                <Copy className=\"text-gray-400\" />\n              ) : copied === \"pass\" ? (\n                <Check className=\"text-green-500\" />\n              ) : (\n                <Cross className=\"text-red-500 rotate-45\" />\n              )}\n            </Button>\n          )}\n        </div>\n\n        {/* Content */}\n        <div className=\"space-y-4\">\n          {vulnerabilityCardLoading ? (\n            // Loading\n            <div className=\"h-20 grid place-items-center\">\n              <Loader2Icon className=\"text-gray-400 animate-spin\" />\n            </div>\n          ) : selectedTab === \"description\" ? (\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <span\n                  className={cn(\"px-2 py-1  text-xs font-medium rounded-md\", {\n                    \"text-red-700 bg-red-50\": riskLevel === \"high\",\n                    \"text-yellow-700 bg-yellow-50\": riskLevel === \"medium\",\n                    \"text-green-700 bg-green-50\": riskLevel === \"low\",\n                    \"text-gray-700 bg-gray-100\": riskLevel === \"error\",\n                  })}\n                >\n                  {(riskLevel !== null &&\n                    riskLevel[0]?.toUpperCase() + riskLevel?.slice(1)) ||\n                    \"\"}\n                </span>\n                <h3 className=\"text-sm font-semibold text-gray-900\">\n                  {riskTitle}\n                </h3>\n              </div>\n              <p className=\"text-gray-600 text-sm leading-relaxed\">\n                {riskDescription ?? \"\"}\n              </p>\n            </div>\n          ) : (\n            <SyntaxHighlighter\n              language={codeLanguage || \"plaintext\"}\n              style={atomOneLight}\n              className=\"p-4 text-sm !font-mono !bg-gray-50 \"\n              showLineNumbers\n              wrapLongLines\n              lineNumberStyle={{ color: \"#9CA3AF\" }}\n            >\n              {correctCode}\n            </SyntaxHighlighter>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default VulnerabilityCard;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 736, "column": 0}, "map": {"version":3,"sources":["file:///Users/sanjithm/hunter-ai/src/app/%5B...slug%5D/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { atomOneLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport {\n  ChevronDown,\n  ChevronUp,\n  LoaderCircleIcon,\n  ShieldAlert,\n  ShieldCheckIcon,\n} from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useParams } from \"next/navigation\";\nimport {\n  checkCodeSecurity,\n  fetchRepoFiles,\n  scanVulnerability,\n} from \"../actions\";\nimport RepoHeader from \"@/components/repo-header\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { Button } from \"@/components/ui/button\";\nimport VulnerabilityCard from \"@/components/vulnerability-card\";\n\nexport default function Page() {\n  const params = useParams<{ slug: Array<string> }>();\n  const { slug } = params;\n\n  const [owner, repo] = slug;\n  const [codeSnippets, setCodeSnippets] = useState<CodeSnippet[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [openCard, setOpenCard] = useState<boolean>(false);\n  const [vulnerabilityCardInfo, setVulnerabilityCardInfo] = useState<\n    Omit<VulnerabilityCardProps, \"setOpenCard\">\n  >({\n    correctCode: \"\",\n    riskDescription: \"\",\n    riskLevel: \"\",\n    riskTitle: \"\",\n    vulnerabilityCardLoading: true,\n    codeLanguage: \"\",\n    codeFileName: \"\",\n  });\n  const [selectedSnippetIndex, setSelectedSnippetIndex] = useState<\n    number | null\n  >(null);\n\n  const loadAndAnalyseFiles = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      setIsRetrying(false);\n      \n      const files: CodeSnippet[] = await fetchRepoFiles(owner, repo);\n      \n      if (files.length === 0) {\n        setLoading(false);\n        return;\n      }\n      \n      setCodeSnippets(\n        files.map((file) => ({ ...file, isOpen: false, isLoading: true }))\n      );\n      setLoading(false);\n      \n      // Analyze files for security vulnerabilities\n      for (const [fileIndex, file] of files.entries()) {\n        try {\n          const { isSecure } = await checkCodeSecurity(\n            file.content.replaceAll(/[\\s\\n]/g, \"\")\n          );\n          setCodeSnippets((prev) =>\n            prev.map((prevFile, prevIndex) =>\n              prevIndex !== fileIndex\n                ? { ...prevFile }\n                : { ...prevFile, isSecure, isLoading: false }\n            )\n          );\n        } catch (securityError: any) {\n          console.error(`Error analyzing ${file.name}:`, securityError);\n          \n          // Show warning for analysis failures but continue\n          setCodeSnippets((prev) =>\n            prev.map((prevFile, prevIndex) =>\n              prevIndex !== fileIndex\n                ? { ...prevFile }\n                : { \n                    ...prevFile, \n                    isSecure: true, \n                    isLoading: false,\n                    message: `Analysis failed: ${securityError.message || 'Unknown error'}`\n                  }\n            )\n          );\n        }\n      }\n    } catch (err: any) {\n      console.error('Error loading repository:', err);\n      setError(err.message || 'Failed to load repository');\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadAndAnalyseFiles();\n  }, [owner, repo]);\n\n  const toggleSnippet = (index: number) => {\n    setCodeSnippets((prev) =>\n      prev.map((snippet, i) =>\n        i === index\n          ? {\n              ...snippet,\n              isOpen: !snippet.isOpen,\n            }\n          : snippet\n      )\n    );\n  };\n\n  return (\n    <div className=\"py-8 px-4\">\n      {/* Header */}\n      <RepoHeader owner={owner} repo={repo} />\n      \n      {/* Code snippets and other content */}\n      <div\n        className={cn(\"mx-auto px-10 transition-all duration-300 ease-in-out\", {\n          \"max-w-7xl\": openCard,\n          \"max-w-4xl\": !openCard,\n        })}\n      >\n        {loading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div\n                key={i}\n                className=\"h-14 bg-gray-50 rounded-lg animate-pulse\"\n              />\n            ))}\n          </div>\n        ) : error ? (\n          <div className=\"p-6 bg-red-50 border border-red-200 rounded-xl flex flex-col items-center max-w-2xl mx-auto\">\n            <div className=\"text-red-400 mb-3 text-4xl\">⚠️</div>\n            <h3 className=\"text-red-800 font-semibold mb-2\">Failed to Load Repository</h3>\n            <p className=\"text-red-600 text-center mb-4\">{error}</p>\n            \n            {/* Action buttons */}\n            <div className=\"flex gap-3 mb-4\">\n              <Button \n                onClick={() => {\n                  setIsRetrying(true);\n                  loadAndAnalyseFiles();\n                }} \n                disabled={isRetrying}\n                className=\"bg-red-600 hover:bg-red-700 text-white\"\n              >\n                {isRetrying ? (\n                  <>\n                    <LoaderCircleIcon className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Retrying...\n                  </>\n                ) : (\n                  'Try Again'\n                )}\n              </Button>\n              \n              <Button \n                onClick={() => window.location.href = '/'}\n                variant=\"outline\"\n                className=\"border-red-300 text-red-700 hover:bg-red-50\"\n              >\n                Back to Home\n              </Button>\n            </div>\n            \n            {/* Helpful tips based on error type */}\n            <div className=\"bg-red-100 p-4 rounded-lg w-full\">\n              <p className=\"text-red-700 text-sm font-medium mb-2\">💡 Common Solutions:</p>\n              <ul className=\"text-red-600 text-sm space-y-1\">\n                {error.includes('GitHub token') && (\n                  <li>• Add <code>NEXT_GITHUB_TOKEN=your_token_here</code> to your <code>.env.local</code> file</li>\n                )}\n                {error.includes('not found') && (\n                  <>\n                    <li>• Check the repository URL spelling</li>\n                    <li>• Ensure the repository exists and is publicly accessible</li>\n                  </>\n                )}\n                {error.includes('Access denied') && (\n                  <>\n                    <li>• Make sure the repository is public, or</li>\n                    <li>• Verify your GitHub token has the necessary permissions</li>\n                  </>\n                )}\n                {error.includes('Network error') && (\n                  <>\n                    <li>• Check your internet connection</li>\n                    <li>• Try again in a few moments</li>\n                  </>\n                )}\n                {error.includes('OpenAI') && (\n                  <>\n                    <li>• Add <code>NEXT_OPENAI_API_KEY=your_api_key</code> to your <code>.env.local</code> file</li>\n                    <li>• Ensure you have OpenAI API credits available</li>\n                  </>\n                )}\n                {!error.includes('GitHub token') && !error.includes('not found') && !error.includes('Access denied') && !error.includes('Network error') && !error.includes('OpenAI') && (\n                  <>\n                    <li>• Check your internet connection</li>\n                    <li>• Verify the repository URL is correct</li>\n                    <li>• Try refreshing the page</li>\n                  </>\n                )}\n              </ul>\n            </div>\n          </div>\n        ) : codeSnippets.length === 0 ? (\n          <div className=\"p-6 bg-gray-100 rounded-xl flex flex-col items-center\">\n            <div className=\"text-gray-400 mb-3 text-4xl\">ⓘ</div>\n            <p className=\"text-gray-500 font-medium\">No code files found</p>\n            <p className=\"text-gray-400 text-sm mt-2\">This repository might not contain supported file types</p>\n          </div>\n        ) : (\n          <div className=\"flex w-full justify-between gap-4\">\n            <div\n              className={cn(\"space-y-2 w-full\", {\n                \"w-1/2\": openCard,\n              })}\n            >\n              {codeSnippets.map((snippet, index) => (\n                <div\n                  key={index}\n                  className={cn(\n                    \"group rounded-lg border transition-all hover:border-gray-300 relative\",\n                    selectedSnippetIndex === index ? \"bg-gray-100\" : \"bg-white\"\n                  )}\n                >\n                  <div\n                    role=\"button\"\n                    tabIndex={0}\n                    onClick={() => toggleSnippet(index)}\n                    className=\"flex items-center justify-between px-4 py-3\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      {snippet.isOpen ? (\n                        <ChevronUp className=\"h-5 w-5 text-gray-400 cursor-pointer\" />\n                      ) : (\n                        <ChevronDown className=\"h-5 w-5 text-gray-400 cursor-pointer\" />\n                      )}\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-6 h-6 rounded-md bg-gray-100 flex items-center justify-center\">\n                          <span className=\"text-sm\">📄</span>\n                        </div>\n                        <div className=\"text-left\">\n                          <div className=\"font-medium text-gray-800 text-sm\">\n                            {snippet.name.split(\"/\").pop()}\n                          </div>\n                          <div className=\"text-xs text-gray-400 font-mono mt-1\">\n                            {/* File name */}\n                            {snippet.name}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2 items-center\">\n                      {snippet.isLoading ? (\n                        // When loading\n                        <>\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger>\n                                <LoaderCircleIcon className=\"h-5 w-5 text-gray-600 animate-spin\" />\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                <p>Queued for security scan...</p>\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                        </>\n                      ) : (\n                        <TooltipProvider>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                disabled={\n                                  vulnerabilityCardInfo.vulnerabilityCardLoading &&\n                                  openCard\n                                }\n                                variant={\"outline\"}\n                                className={cn(\"h-10 w-10\", {\n                                  \"cursor-pointer\": !snippet.isSecure,\n                                })}\n                                onClick={async (e) => {\n                                  e.stopPropagation();\n                                  if (snippet.isSecure) return;\n\n                                  setVulnerabilityCardInfo(() => ({\n                                    vulnerabilityCardLoading: true,\n                                    correctCode: \"\",\n                                    riskDescription: \"\",\n                                    riskLevel: \"\",\n                                    riskTitle: \"\",\n                                    codeLanguage: \"\",\n                                  }));\n                                  setSelectedSnippetIndex(index);\n                                  setOpenCard(true);\n                                  // const formattedCode =\n                                  //   snippet.content?.replaceAll(/[\\s\\n]/g, \"\");\n\n                                  try {\n                                    const scanVulnerabilityResponse =\n                                      await scanVulnerability(snippet.content);\n\n                                    setVulnerabilityCardInfo((prev) => ({\n                                      ...prev,\n                                      ...scanVulnerabilityResponse,\n                                      codeLanguage: snippet.language,\n                                      codeFileName: snippet.name,\n                                      vulnerabilityCardLoading: false,\n                                    }));\n                                  } catch (analysisError: any) {\n                                    console.error('Vulnerability analysis failed:', analysisError);\n                                    setVulnerabilityCardInfo((prev) => ({\n                                      ...prev,\n                                      riskLevel: \"error\" as RiskLevel,\n                                      riskTitle: \"Analysis Failed\",\n                                      riskDescription: `Unable to analyze this file: ${analysisError.message || 'Unknown error occurred'}. This might be due to API limits, network issues, or file complexity.`,\n                                      correctCode: `// Analysis failed for ${snippet.name}\\n// Error: ${analysisError.message || 'Unknown error'}\\n\\n${snippet.content}`,\n                                      codeLanguage: snippet.language,\n                                      codeFileName: snippet.name,\n                                      vulnerabilityCardLoading: false,\n                                    }));\n                                  }\n                                }}\n                              >\n                                {snippet.isSecure ? (\n                                  <ShieldCheckIcon\n                                    className={cn(\"text-green-500\")}\n                                  />\n                                ) : (\n                                  <ShieldAlert className=\"text-red-500\" />\n                                )}\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent forceMount>\n                              {snippet.isSecure ? (\n                                <p>No vulnerabilities found</p>\n                              ) : (\n                                <p>Click to review.</p>\n                              )}\n                            </TooltipContent>\n                          </Tooltip>\n                        </TooltipProvider>\n                      )}\n                    </div>\n                  </div>\n                  <AnimatePresence>\n                    {snippet.isOpen && (\n                      <motion.div\n                        initial={{ opacity: 0, height: 0 }}\n                        animate={{ opacity: 1, height: \"auto\" }}\n                        exit={{ opacity: 0, height: 0 }}\n                        transition={{ duration: 0.2, ease: \"easeInOut\" }}\n                      >\n                        <div\n                          className={cn(\"border-t w-full\", {\n                            \"max-w-xl\": openCard,\n                          })}\n                        >\n                          <SyntaxHighlighter\n                            language={snippet.language || \"plaintext\"}\n                            style={atomOneLight}\n                            className=\"p-4 text-sm !font-mono !bg-gray-50 \"\n                            showLineNumbers\n                            wrapLongLines\n                            lineNumberStyle={{ color: \"#9CA3AF\" }}\n                          >\n                            {/* Code snippet */}\n                            {snippet.content}\n                          </SyntaxHighlighter>\n                        </div>\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                </div>\n              ))}\n            </div>\n            {openCard && (\n              <VulnerabilityCard\n                riskLevel={vulnerabilityCardInfo.riskLevel}\n                riskTitle={vulnerabilityCardInfo.riskTitle}\n                riskDescription={vulnerabilityCardInfo.riskDescription}\n                correctCode={vulnerabilityCardInfo.correctCode}\n                setOpenCard={setOpenCard}\n                vulnerabilityCardLoading={\n                  vulnerabilityCardInfo.vulnerabilityCardLoading\n                }\n                codeLanguage={vulnerabilityCardInfo.codeLanguage}\n                codeFileName={vulnerabilityCardInfo.codeFileName}\n                setSelectedSnippetIndex={setSelectedSnippetIndex}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}