{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/rit3sh/Downloads/yoyoyo-main/src/app/actions.ts"],"sourcesContent":["\"use server\"\nimport axios from \"axios\";\nimport pLimit from \"p-limit\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\nimport { JsonOutputParser } from \"@langchain/core/output_parsers\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\n\n/**\n * High-ROI defaults (override via env)\n */\nconst GITHUB_API = process.env.NEXT_GITHUB_API || \"https://api.github.com\";\nconst GITHUB_TOKEN = process.env.NEXT_GITHUB_TOKEN || \"\";\nconst OPENAI_KEY = process.env.NEXT_OPENAI_API_KEY || \"\";\nconst OPENAI_MODEL = process.env.OPENAI_MODEL || \"gpt-4o-mini\";\nconst MAX_FILE_SIZE = Number(process.env.MAX_FILE_SIZE_BYTES || 1024 * 1024); // 1MB\nconst MAX_FILES = Number(process.env.MAX_FILES || 100);\nconst BATCH_DOWNLOAD_CONCURRENCY = Number(process.env.BATCH_DOWNLOAD_CONCURRENCY || 6);\nconst LINES_PER_CHUNK = Number(process.env.LINES_PER_CHUNK || 200);\n\n/* ----------------------------\n   Types\n   ---------------------------- */\nexport type CodeSnippet = {\n  name: string;\n  content: string;\n  language: string;\n  path: string;\n  size?: number;\n  isOpen?: boolean;\n  isLoading?: boolean;\n  isSecure?: boolean;\n  message?: string;\n};\n\nexport type Vulnerability = {\n  severity: \"low\" | \"medium\" | \"high\";\n  title: string;\n  description: string;\n  file: string;\n  startLine?: number;\n  endLine?: number;\n  fix: string;\n  confidence?: number;\n};\n\nexport type ScanResult = {\n  file: string;\n  vulnerabilities: Vulnerability[];\n};\n\nexport type VulnerabilityCardContentType = {\n  riskLevel: \"low\" | \"medium\" | \"high\" | \"\";\n  riskTitle: string;\n  riskDescription: string;\n};\n\nexport type SemgrepFinding = {\n  file: string;\n  line: number;\n  issue: string;\n  severity: string;\n  rule_id: string;\n  cwe: string;\n  owasp: string;\n  description: string;\n  secure_code_fix: string;\n  original_message: string;\n};\n\n/* ----------------------------\n   Enhanced Semgrep Integration\n   ---------------------------- */\nexport async function runSemgrepAnalysis(repoPath: string): Promise<SemgrepFinding[]> {\n  return new Promise((resolve, reject) => {\n    console.log(`🔍 Running enhanced Semgrep analysis on ${repoPath}...`);\n    \n    // Set up environment variables for the Python script\n    const env = {\n      ...process.env,\n      OPENAI_API_KEY: OPENAI_KEY,\n      PYTHONPATH: process.cwd()\n    };\n\n    const scriptPath = path.join(process.cwd(), 'semgrep_scanner.py');\n    \n    // Spawn Python process\n    const pythonProcess = spawn('python3', [scriptPath, repoPath], {\n      env,\n      cwd: process.cwd()\n    });\n\n    let stdout = '';\n    let stderr = '';\n\n    pythonProcess.stdout.on('data', (data) => {\n      stdout += data.toString();\n    });\n\n    pythonProcess.stderr.on('data', (data) => {\n      stderr += data.toString();\n    });\n\n    pythonProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(`Python script exited with code ${code}`);\n        console.error(`stderr: ${stderr}`);\n        reject(new Error(`Semgrep analysis failed: ${stderr}`));\n        return;\n      }\n\n      try {\n        // Extract JSON from stdout (everything after the last line of dashes)\n        const lines = stdout.split('\\n');\n        let jsonStartIndex = -1;\n        \n        for (let i = lines.length - 1; i >= 0; i--) {\n          if (lines[i].includes('📋 SECURITY SCAN RESULTS') || lines[i].startsWith('[')) {\n            jsonStartIndex = lines[i].startsWith('[') ? i : i + 2;\n            break;\n          }\n        }\n        \n        if (jsonStartIndex === -1) {\n          // Look for any JSON array in the output\n          for (let i = 0; i < lines.length; i++) {\n            if (lines[i].trim().startsWith('[')) {\n              jsonStartIndex = i;\n              break;\n            }\n          }\n        }\n\n        if (jsonStartIndex !== -1) {\n          const jsonStr = lines.slice(jsonStartIndex).join('\\n');\n          const findings = JSON.parse(jsonStr);\n          console.log(`✅ Parsed ${findings.length} Semgrep findings`);\n          resolve(findings);\n        } else {\n          console.log('No JSON findings found in output');\n          resolve([]);\n        }\n      } catch (error) {\n        console.error('Failed to parse Semgrep output:', error);\n        console.log('Raw output:', stdout);\n        resolve([]);\n      }\n    });\n\n    pythonProcess.on('error', (error) => {\n      console.error('Failed to start Python process:', error);\n      reject(error);\n    });\n\n    // Set timeout\n    setTimeout(() => {\n      pythonProcess.kill();\n      reject(new Error('Semgrep analysis timed out'));\n    }, 120000); // 2 minutes timeout\n  });\n}\n\n/* ----------------------------\n   Utility: quick regex pre-scan (cheap & fast — high ROI)\n   ---------------------------- */\nconst DEFAULT_PATTERNS: { id: string; re: RegExp; severity: Vulnerability[\"severity\"]; hint?: string }[] = [\n  { id: \"hardcoded_secrets\", re: /(API_KEY|SECRET|PASSWORD|TOKEN)\\s*[:=]\\s*[\"']?[A-Za-z0-9_\\-]{6,}[\"']?/i, severity: \"high\", hint: \"hardcoded_secrets\" },\n  { id: \"sql_string_interp\", re: /SELECT.*FROM.*WHERE.*\\$\\{.*\\}/i, severity: \"high\", hint: \"sql_string_interp\" },\n  { id: \"eval_os_system\", re: /\\beval\\s*\\(|\\bos\\.system\\s*\\(|\\bsystem\\(/i, severity: \"high\", hint: \"eval_os_system\" },\n  { id: \"weak_hash\", re: /\\b(md5|sha1)\\s*\\(/i, severity: \"medium\", hint: \"weak_hash\" },\n  { id: \"path_traversal\", re: /\\.\\.\\/|\\.\\.\\\\|open\\([^,]*\\+|fs\\.readFileSync\\([^,]*\\+/, severity: \"medium\", hint: \"path_traversal\" },\n];\n\n/* ----------------------------\n   fetchRepoFiles: uses git/trees for a single recursive listing\n   ---------------------------- */\nexport async function fetchRepoFiles(owner: string, repo: string, branch = \"main\"): Promise<CodeSnippet[]> {\n  if (!GITHUB_TOKEN) {\n    console.warn(\"⚠️ NO GITHUB TOKEN — returning demo files (for hackathon).\");\n    return [\n      {\n        name: \"server.js\",\n        path: \"server.js\",\n        content: `const express = require('express');\\nconst app = express();\\nconst password = \"hardcoded123\";\\n// insecure sample...`,\n        language: \"js\",\n        size: 512,\n      },\n    ];\n  }\n\n  // Step 1: get the SHA of the branch\n  const branchResp = await axios.get(`${GITHUB_API}/repos/${owner}/${repo}/branches/${branch}`, {\n    headers: { Authorization: `token ${GITHUB_TOKEN}`, Accept: \"application/vnd.github.v3+json\" },\n    timeout: 10000,\n  }).catch((e: any) => {\n    throw new Error(`Failed to fetch branch ${branch}: ${e?.response?.status || e.message}`);\n  });\n\n  const commitSha = branchResp.data?.commit?.commit?.tree?.sha || branchResp.data?.commit?.sha;\n  if (!commitSha) {\n    throw new Error(\"Could not locate branch commit SHA.\");\n  }\n\n  // Step 2: get a recursive tree (single call)\n  const treeResp = await axios.get(`${GITHUB_API}/repos/${owner}/${repo}/git/trees/${commitSha}?recursive=1`, {\n    headers: { Authorization: `token ${GITHUB_TOKEN}`, Accept: \"application/vnd.github.v3+json\" },\n    timeout: 20000,\n  });\n\n  const items: any[] = treeResp.data?.tree || [];\n  const ALLOWED_EXT = /\\.(js|ts|py|java|php|rb|go|rs|jsx|tsx|mjs|cjs|env|config|conf|ini|xml|yaml|yml|json|md|txt)$/i;\n  const IGNORED_PATHS = [/node_modules/, /\\.gitignore/, /package-lock\\.json/, /^dist\\//, /^build\\//, /\\.DS_Store/];\n\n  const candidates = items\n    .filter((it) => it.type === \"blob\")\n    .filter((it) => ALLOWED_EXT.test(it.path) || /\\.env$/i.test(it.path) || /config/i.test(it.path))\n    .filter((it) => !IGNORED_PATHS.some((r) => r.test(it.path)))\n    .slice(0, MAX_FILES);\n\n  // Step 3: download files in limited concurrency\n  const limit = pLimit(BATCH_DOWNLOAD_CONCURRENCY);\n  const downloads = candidates.map((it) =>\n    limit(async (): Promise<CodeSnippet | null> => {\n      try {\n        if (it.size > MAX_FILE_SIZE) {\n          console.warn(`Skipping large file ${it.path} size=${it.size}`);\n          return null;\n        }\n        const rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${it.path}`;\n        const resp = await axios.get<string>(rawUrl, { timeout: 15000, responseType: \"text\", transformResponse: [(v: any) => v] });\n        return {\n          name: it.path,\n          path: it.path,\n          content: resp.data,\n          language: it.path.split(\".\").pop()?.toLowerCase() || \"txt\",\n          size: it.size,\n        };\n      } catch (err: any) {\n        console.warn(`Failed to fetch ${it.path}: ${err?.message || err}`);\n        return null;\n      }\n    })\n  );\n\n  const results = await Promise.all(downloads);\n  const final = results.filter(Boolean) as CodeSnippet[];\n  console.log(`Fetched ${final.length} files from ${owner}/${repo}`);\n  return final;\n}\n\n/* ----------------------------\n   chunkFileIntoRanges: split large files into chunks with line numbers\n   ---------------------------- */\nfunction chunkFileIntoRanges(snippet: CodeSnippet, linesPerChunk = LINES_PER_CHUNK) {\n  const lines = snippet.content.split(/\\r?\\n/);\n  const chunks: { text: string; startLine: number; endLine: number; file: string }[] = [];\n  for (let i = 0; i < lines.length; i += linesPerChunk) {\n    const start = i + 1;\n    const end = Math.min(i + linesPerChunk, lines.length);\n    const text = lines.slice(i, end).join(\"\\n\");\n    chunks.push({ text, startLine: start, endLine: end, file: snippet.name });\n  }\n  return chunks;\n}\n\n/* ----------------------------\n   cheapPreScan: runs regex scans and returns quick findings.\n   Very high ROI: catch obvious low-hanging fruit locally before calling LLM.\n   ---------------------------- */\nexport async function cheapPreScan(snippet: CodeSnippet) {\n  const matches: Vulnerability[] = [];\n  const titleMap: Record<string, string> = {\n    \"hardcoded_secrets\": \"Hardcoded Secrets Detected\",\n    \"sql_string_interp\": \"SQL Injection Vulnerability\", \n    \"eval_os_system\": \"Code Injection Risk\",\n    \"weak_hash\": \"Weak Cryptographic Hash\",\n    \"path_traversal\": \"Path Traversal Vulnerability\"\n  };\n  \n  for (const pat of DEFAULT_PATTERNS) {\n    if (pat.re.test(snippet.content)) {\n      matches.push({\n        severity: pat.severity,\n        title: pat.hint || pat.id,\n        description: titleMap[pat.hint || pat.id] || `Security issue detected: ${pat.id}`,\n        file: snippet.name,\n        startLine: 1,\n        endLine: 1,\n        fix: getQuickFix(pat.hint || pat.id),\n        confidence: 0.8,\n      });\n    }\n  }\n  return matches;\n}\n\nfunction getQuickFix(patternId: string): string {\n  const fixes: Record<string, string> = {\n    \"hardcoded_secrets\": \"Move secrets to environment variables using process.env.SECRET_NAME\",\n    \"sql_string_interp\": \"Use parameterized queries or prepared statements instead of string concatenation\",\n    \"eval_os_system\": \"Replace eval() and system() calls with safer alternatives that don't execute arbitrary code\",\n    \"weak_hash\": \"Use SHA-256, SHA-3, or bcrypt instead of MD5/SHA1 for cryptographic operations\",\n    \"path_traversal\": \"Validate and sanitize file paths, use path.resolve() and restrict to safe directories\"\n  };\n  \n  return fixes[patternId] || \"Review and secure this code pattern\";\n}\n\n/* ----------------------------\n   Enhanced scanRepoFiles with Semgrep integration\n   ---------------------------- */\nexport async function scanRepoFiles(snippets: CodeSnippet[], useEnhancedScan: boolean = true): Promise<ScanResult[]> {\n  console.log(`🔍 Starting security analysis of ${snippets.length} files...`);\n  \n  // Always do quick pre-scan first\n  const quickFindsPromises = snippets.map(async (s) => ({ file: s.name, quick: await cheapPreScan(s) }));\n  const quickFinds = await Promise.all(quickFindsPromises);\n\n  let semgrepFindings: SemgrepFinding[] = [];\n  \n  // If enhanced scan is enabled and we have OpenAI key, run Semgrep\n  if (useEnhancedScan && OPENAI_KEY) {\n    try {\n      // Create temporary directory with repository files for Semgrep analysis\n      const tempDir = await createTempRepoDir(snippets);\n      semgrepFindings = await runSemgrepAnalysis(tempDir);\n      console.log(`🤖 Enhanced scan found ${semgrepFindings.length} additional issues`);\n    } catch (error) {\n      console.warn('Enhanced Semgrep scan failed, falling back to regex patterns:', error);\n    }\n  }\n\n  // Files needing LLM: those with quickFinds OR matching certain types (e.g., .js/.py)\n  const candidates = snippets.filter((s) => {\n    const q = quickFinds.find((x) => x.file === s.name);\n    if (q && q.quick.length > 0) return true; // flagged\n    return /\\.(js|ts|py|java|php|go|rb)$/i.test(s.name);\n  });\n\n  const limit = pLimit(3);\n  const fileResults: ScanResult[] = [];\n\n  // Process each candidate file\n  for (const snippet of candidates) {\n    const fileQuick = quickFinds.find((x) => x.file === snippet.name)?.quick || [];\n    \n    // Combine regex findings with Semgrep findings for this file\n    const fileSemgrepFindings = semgrepFindings.filter(f => f.file.endsWith(snippet.name) || f.file === snippet.name);\n    \n    // Convert Semgrep findings to Vulnerability format\n    const semgrepVulnerabilities: Vulnerability[] = fileSemgrepFindings.map(f => ({\n      severity: f.severity.toLowerCase() as \"low\" | \"medium\" | \"high\",\n      title: f.issue.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n      description: f.description,\n      file: snippet.name,\n      startLine: f.line,\n      endLine: f.line,\n      fix: f.secure_code_fix,\n      confidence: 0.9\n    }));\n\n    // Combine all vulnerabilities (avoid duplicates)\n    const allVulnerabilities = [...fileQuick, ...semgrepVulnerabilities];\n    const uniqueVulnerabilities = allVulnerabilities.filter((vuln, index, self) => \n      index === self.findIndex(v => v.title === vuln.title && v.startLine === vuln.startLine)\n    );\n\n    if (uniqueVulnerabilities.length > 0) {\n      fileResults.push({ file: snippet.name, vulnerabilities: uniqueVulnerabilities });\n    }\n  }\n\n  // Add non-candidate files with only quick pre-scan hits\n  const nonCandidates = snippets.filter((s) => !candidates.includes(s));\n  for (const s of nonCandidates) {\n    const quick = await cheapPreScan(s);\n    if (quick.length > 0) fileResults.push({ file: s.name, vulnerabilities: quick });\n  }\n\n  console.log(`✅ Security analysis complete: ${fileResults.length} files with issues found`);\n  return fileResults;\n}\n\n/* ----------------------------\n   Helper function to create temporary directory for Semgrep\n   ---------------------------- */\nasync function createTempRepoDir(snippets: CodeSnippet[]): Promise<string> {\n  const fs = await import('fs/promises');\n  const os = await import('os');\n  const path = await import('path');\n  \n  // Create temporary directory\n  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'semgrep-scan-'));\n  \n  // Write all files to temp directory\n  for (const snippet of snippets) {\n    const filePath = path.join(tempDir, snippet.name);\n    const dirPath = path.dirname(filePath);\n    \n    // Ensure directory exists\n    await fs.mkdir(dirPath, { recursive: true });\n    \n    // Write file content\n    await fs.writeFile(filePath, snippet.content, 'utf8');\n  }\n  \n  console.log(`📁 Created temporary repository at ${tempDir}`);\n  return tempDir;\n}\n\n/* ----------------------------\n   Debug function to check environment variables\n   ---------------------------- */\nexport async function debugEnvironment() {\n  return {\n    hasGithubToken: !!GITHUB_TOKEN,\n    hasOpenAiKey: !!OPENAI_KEY,\n    githubApi: GITHUB_API,\n    openaiModel: OPENAI_MODEL,\n    githubTokenPreview: GITHUB_TOKEN ? `${GITHUB_TOKEN.substring(0, 10)}...` : \"Not set\",\n    openaiKeyPreview: OPENAI_KEY ? `${OPENAI_KEY.substring(0, 10)}...` : \"Not set\"\n  };\n}\n\n/* ----------------------------\n   Legacy compatibility functions for existing UI\n   ---------------------------- */\nexport async function checkCodeSecurity(code: string): Promise<{ \n  isSecure: boolean; \n  vulnerabilities: Vulnerability[] \n}> {\n  const snippet: CodeSnippet = {\n    name: \"input.js\",\n    path: \"input.js\",\n    content: code,\n    language: \"javascript\",\n    size: code.length\n  };\n  \n  const vulnerabilities = await cheapPreScan(snippet);\n  return {\n    isSecure: vulnerabilities.length === 0,\n    vulnerabilities\n  };\n}\n\nexport async function scanVulnerability(code: string): Promise<VulnerabilityCardContentType & { correctCode: string }> {\n  console.log(\"🔍 scanVulnerability called with code length:\", code.length);\n  console.log(\"🔑 Environment check - OPENAI_KEY exists:\", !!OPENAI_KEY);\n  console.log(\"🔑 Environment check - GITHUB_TOKEN exists:\", !!GITHUB_TOKEN);\n  \n  const snippet: CodeSnippet = {\n    name: \"temp.js\",\n    path: \"temp.js\", \n    content: code,\n    language: \"javascript\",\n    size: code.length\n  };\n  \n  const vulnerabilities = await cheapPreScan(snippet);\n  console.log(\"📋 Found vulnerabilities:\", vulnerabilities.length);\n  \n  if (vulnerabilities.length === 0) {\n    return {\n      riskLevel: \"low\",\n      riskTitle: \"No Issues Found\", \n      riskDescription: \"The code appears to be secure based on our analysis.\",\n      correctCode: code\n    };\n  }\n  \n  const highestSeverity = vulnerabilities.reduce((highest, curr) => {\n    const severityOrder = { low: 1, medium: 2, high: 3 };\n    return severityOrder[curr.severity] > severityOrder[highest.severity] ? curr : highest;\n  });\n  \n  // Generate better descriptions and secure code fixes\n  const secureCodeFix = generateSecureCodeFix(code, highestSeverity);\n  \n  return {\n    riskLevel: highestSeverity.severity,\n    riskTitle: highestSeverity.title,\n    riskDescription: getDetailedDescription(highestSeverity, code),\n    correctCode: secureCodeFix\n  };\n}\n\nfunction getDetailedDescription(vulnerability: Vulnerability, originalCode: string): string {\n  const descriptions: Record<string, string> = {\n    \"hardcoded_secrets\": `This code contains hardcoded sensitive information (API keys, passwords, tokens, or secrets) directly in the source code. This is a critical security vulnerability because:\n\n• Secrets are visible to anyone with access to the code\n• Version control systems store these secrets permanently  \n• Deployed applications expose secrets in plain text\n• Attackers can extract and misuse these credentials\n\nThe detected pattern suggests sensitive data is embedded directly in the code rather than being loaded from secure environment variables or a secrets management system.`,\n\n    \"sql_string_interp\": `This code uses string interpolation to build SQL queries, making it vulnerable to SQL injection attacks. This occurs when user input is directly concatenated into SQL statements without proper sanitization:\n\n• Attackers can inject malicious SQL code through input parameters\n• Database contents can be read, modified, or deleted\n• Administrative access to the database may be compromised\n• Application logic can be bypassed\n\nThe vulnerability allows attackers to manipulate the SQL query structure by providing specially crafted input values.`,\n\n    \"eval_os_system\": `This code uses dynamic code execution functions (eval, system, exec) which can lead to remote code execution vulnerabilities:\n\n• Attackers can execute arbitrary code on the server\n• System commands can be injected and executed\n• Full system compromise is possible\n• Application sandbox can be escaped\n\nThese functions should never process untrusted input as they interpret and execute the input as code or system commands.`,\n\n    \"weak_hash\": `This code uses cryptographically weak hashing algorithms (MD5, SHA1) that are vulnerable to collision attacks and rainbow table lookups:\n\n• MD5 and SHA1 are considered broken for security purposes\n• Modern hardware can compute billions of hashes per second\n• Precomputed hash tables (rainbow tables) exist for common inputs\n• Collisions can be generated with reasonable computational effort\n\nFor security-sensitive applications, use stronger algorithms like SHA-256, SHA-3, or bcrypt for password hashing.`,\n\n    \"path_traversal\": `This code appears to be vulnerable to path traversal attacks, where attackers can access files outside the intended directory:\n\n• Users can provide paths with \"../\" sequences to navigate up directories\n• Sensitive system files may be accessible\n• Application configuration files could be exposed\n• The vulnerability can lead to information disclosure or code execution\n\nFile operations should validate and sanitize all path inputs to prevent directory traversal.`\n  };\n\n  return descriptions[vulnerability.title] || vulnerability.description;\n}\n\nfunction generateSecureCodeFix(originalCode: string, vulnerability: Vulnerability): string {\n  const fixes: Record<string, (code: string) => string> = {\n    \"hardcoded_secrets\": (code: string) => {\n      let fixedCode = code;\n      \n      const patterns = [\n        { pattern: /(API_KEY|SECRET|PASSWORD|TOKEN)\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: '$1 = process.env.$1 || \"\"' },\n        { pattern: /apiKey\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: 'apiKey = process.env.API_KEY || \"\"' },\n        { pattern: /password\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: 'password = process.env.PASSWORD || \"\"' }\n      ];\n      \n      patterns.forEach(({ pattern, replacement }) => {\n        fixedCode = fixedCode.replace(pattern, replacement);\n      });\n      \n      if (!fixedCode.includes('require(\"dotenv\")') && !fixedCode.includes('import dotenv')) {\n        fixedCode = 'require(\"dotenv\").config();\\n\\n' + fixedCode;\n      }\n      \n      return `// ✅ Secure version - uses environment variables\n${fixedCode}\n\n// Add to your .env file:\n// API_KEY=your_actual_api_key_here\n// PASSWORD=your_actual_password_here`;\n    },\n\n    \"sql_string_interp\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(\n        /SELECT.*FROM.*WHERE.*\\$\\{.*\\}/gi,\n        'SELECT * FROM users WHERE id = ?'\n      );\n      \n      return `// ✅ Secure version - uses parameterized queries\n${fixedCode}\n\n// Example with proper parameterization:\n// const query = 'SELECT * FROM users WHERE id = ? AND name = ?';\n// const results = await db.query(query, [userId, userName]);`;\n    },\n\n    \"eval_os_system\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(/eval\\s*\\([^)]+\\)/gi, '// eval() removed - use safer alternatives');\n      fixedCode = fixedCode.replace(/os\\.system\\s*\\([^)]+\\)/gi, '// os.system() removed - use subprocess with validation');\n      fixedCode = fixedCode.replace(/system\\s*\\([^)]+\\)/gi, '// system() removed - use safer alternatives');\n      \n      return `// ✅ Secure version - removes dynamic code execution\n${fixedCode}\n\n// Safe alternatives:\n// - Instead of eval(): use JSON.parse() for data, or a proper parser\n// - Instead of system(): use child_process.spawn() with input validation`;\n    },\n\n    \"weak_hash\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(/md5\\s*\\(/gi, 'crypto.createHash(\"sha256\")');\n      fixedCode = fixedCode.replace(/sha1\\s*\\(/gi, 'crypto.createHash(\"sha256\")');\n      \n      return `// ✅ Secure version - uses strong hashing\nconst crypto = require('crypto');\n${fixedCode}\n\n// For password hashing, use bcrypt:\n// const bcrypt = require('bcrypt');\n// const hashedPassword = await bcrypt.hash(password, 12);`;\n    },\n\n    \"path_traversal\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(\n        /(open\\s*\\(|fs\\.readFileSync\\s*\\(|readFile\\s*\\()[^,)]+/gi,\n        '$1path.resolve(SAFE_DIR, path.basename(filename))'\n      );\n      \n      return `// ✅ Secure version - validates file paths\nconst path = require('path');\nconst SAFE_DIR = '/safe/directory';\n\n${fixedCode}\n\n// Additional security measures:\n// - Use path.resolve() and path.basename() to sanitize paths  \n// - Define an allowed directory and never go outside it`;\n    }\n  };\n\n  const fixFunction = fixes[vulnerability.title];\n  if (fixFunction) {\n    return fixFunction(originalCode);\n  }\n  \n  return `// ✅ Secure version\n${originalCode}\n\n// General security recommendations:\n// - Validate and sanitize all inputs\n// - Use environment variables for secrets\n// - Apply principle of least privilege`;\n}\n\n/* ----------------------------\n   Enhanced repository scanning with Semgrep\n   ---------------------------- */\nexport async function scanRepository(owner: string, repo: string): Promise<ScanResult[]> {\n  const files = await fetchRepoFiles(owner, repo);\n  return await scanRepoFiles(files, true); // Enable enhanced scanning\n}\n\n/* ----------------------------\n   Example server handler usage (Next.js / Express)\n   ---------------------------- */\nexport async function handleScanRequest(req: any, res: any) {\n  try {\n    const { owner, repo, branch, enhanced = true } = req.body || req.query;\n    if (!owner || !repo) return res.status(400).json({ error: \"owner & repo required\" });\n\n    const files = await fetchRepoFiles(owner, repo, branch || \"main\");\n    if (!files.length) return res.status(200).json({ results: [] });\n\n    const results = await scanRepoFiles(files, enhanced);\n    return res.status(200).json({ \n      results, \n      scannedFiles: files.length,\n      enhancedScanEnabled: enhanced && !!OPENAI_KEY\n    });\n  } catch (err: any) {\n    console.error(\"scan error:\", err?.message || err);\n    return res.status(500).json({ error: err?.message || \"scan failed\" });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 732, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file:///home/rit3sh/Downloads/yoyoyo-main/src/app/%5B...slug%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/[...slug]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/[...slug]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 815, "column": 0}, "map": {"version":3,"sources":["file:///home/rit3sh/Downloads/yoyoyo-main/src/app/%5B...slug%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/[...slug]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/[...slug]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 829, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}