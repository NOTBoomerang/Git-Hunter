{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/rit3sh/Downloads/yoyoyo-main/src/app/actions.ts"],"sourcesContent":["\"use server\"\nimport axios from \"axios\";\nimport pLimit from \"p-limit\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { ChatPromptTemplate } from \"@langchain/core/prompts\";\nimport { JsonOutputParser } from \"@langchain/core/output_parsers\";\nimport { spawn } from \"child_process\";\nimport path from \"path\";\n\n/**\n * High-ROI defaults (override via env)\n */\nconst GITHUB_API = process.env.NEXT_GITHUB_API || \"https://api.github.com\";\nconst GITHUB_TOKEN = process.env.NEXT_GITHUB_TOKEN || \"\";\nconst OPENAI_KEY = process.env.NEXT_OPENAI_API_KEY || \"\";\nconst OPENAI_MODEL = process.env.OPENAI_MODEL || \"gpt-4o-mini\";\nconst MAX_FILE_SIZE = Number(process.env.MAX_FILE_SIZE_BYTES || 1024 * 1024); // 1MB\nconst MAX_FILES = Number(process.env.MAX_FILES || 100);\nconst BATCH_DOWNLOAD_CONCURRENCY = Number(process.env.BATCH_DOWNLOAD_CONCURRENCY || 8); // Increased for faster downloads\nconst LINES_PER_CHUNK = Number(process.env.LINES_PER_CHUNK || 200);\n\n/* ----------------------------\n   Import Types from types.d.ts\n   ---------------------------- */\nimport type { \n  CodeSnippet, \n  Vulnerability, \n  ScanResult, \n  VulnerabilityCardContentType, \n  SemgrepFinding \n} from \"@/types\";\n\n/* ----------------------------\n   Enhanced Semgrep Integration\n   ---------------------------- */\nexport async function runSemgrepAnalysis(repoPath: string): Promise<SemgrepFinding[]> {\n  return new Promise((resolve, reject) => {\n    console.log(`üîç Running enhanced Semgrep analysis on ${repoPath}...`);\n    \n    // Set up environment variables for the Python script\n    const env = {\n      ...process.env,\n      OPENAI_API_KEY: OPENAI_KEY,\n      PYTHONPATH: process.cwd()\n    };\n\n    const scriptPath = path.join(process.cwd(), 'semgrep_scanner.py');\n    \n    // Spawn Python process\n    const pythonProcess = spawn('python3', [scriptPath, repoPath], {\n      env,\n      cwd: process.cwd()\n    });\n\n    let stdout = '';\n    let stderr = '';\n\n    pythonProcess.stdout.on('data', (data) => {\n      stdout += data.toString();\n    });\n\n    pythonProcess.stderr.on('data', (data) => {\n      stderr += data.toString();\n    });\n\n    pythonProcess.on('close', (code) => {\n      if (code !== 0) {\n        console.error(`Python script exited with code ${code}`);\n        console.error(`stderr: ${stderr}`);\n        reject(new Error(`Semgrep analysis failed: ${stderr}`));\n        return;\n      }\n\n      try {\n        // Extract JSON from stdout (everything after the last line of dashes)\n        const lines = stdout.split('\\n');\n        let jsonStartIndex = -1;\n        \n        for (let i = lines.length - 1; i >= 0; i--) {\n          if (lines[i].includes('üìã SECURITY SCAN RESULTS') || lines[i].startsWith('[')) {\n            jsonStartIndex = lines[i].startsWith('[') ? i : i + 2;\n            break;\n          }\n        }\n        \n        if (jsonStartIndex === -1) {\n          // Look for any JSON array in the output\n          for (let i = 0; i < lines.length; i++) {\n            if (lines[i].trim().startsWith('[')) {\n              jsonStartIndex = i;\n              break;\n            }\n          }\n        }\n\n        if (jsonStartIndex !== -1) {\n          const jsonStr = lines.slice(jsonStartIndex).join('\\n');\n          const findings = JSON.parse(jsonStr);\n          console.log(`‚úÖ Parsed ${findings.length} Semgrep findings`);\n          resolve(findings);\n        } else {\n          console.log('No JSON findings found in output');\n          resolve([]);\n        }\n      } catch (error) {\n        console.error('Failed to parse Semgrep output:', error);\n        console.log('Raw output:', stdout);\n        resolve([]);\n      }\n    });\n\n    pythonProcess.on('error', (error) => {\n      console.error('Failed to start Python process:', error);\n      reject(error);\n    });\n\n    // Set timeout\n    setTimeout(() => {\n      pythonProcess.kill();\n      reject(new Error('Semgrep analysis timed out'));\n    }, 120000); // 2 minutes timeout\n  });\n}\n\n/* ----------------------------\n   Pure AI-Powered Security Analysis (No Hardcoded Patterns)\n   ---------------------------- */\n\nasync function analyzeCodeWithAI(snippet: CodeSnippet): Promise<Vulnerability[]> {\n  if (!OPENAI_KEY) {\n    throw new Error(\"üö® OpenAI API key required for AI security analysis. Please set NEXT_OPENAI_API_KEY in your environment.\");\n  }\n\n  console.log(`ü§ñ Running pure AI security analysis on ${snippet.name}`);\n  \n  const model = new ChatOpenAI({\n    model: OPENAI_MODEL,\n    temperature: 0.1,\n    openAIApiKey: OPENAI_KEY,\n  });\n\n  const enhancedSecurityPrompt = `You are an elite cybersecurity expert with decades of experience in vulnerability research and code auditing. \n\nMISSION: Perform a comprehensive security analysis of this code with forensic precision.\n\nCODE TO ANALYZE:\nFile: ${snippet.name}\nLanguage: ${snippet.language}\nSize: ${snippet.content.length} characters\n\n\\`\\`\\`${snippet.language}\n${snippet.content}\n\\`\\`\\`\n\nANALYSIS REQUIREMENTS:\n1. Examine EVERY line for security implications\n2. Consider data flow and execution paths\n3. Identify attack vectors and exploitation scenarios\n4. Assess business logic vulnerabilities\n5. Evaluate framework-specific security issues\n\nVULNERABILITY CATEGORIES TO ASSESS:\nüî¥ CRITICAL: SQL Injection, Command Injection, Code Injection, Authentication Bypass\nüü† HIGH: XSS, Path Traversal, Hardcoded Secrets, Insecure Deserialization  \nüü° MEDIUM: Weak Crypto, CSRF, Information Disclosure, Input Validation\nüü¢ LOW: Security Misconfigurations, Best Practice Violations\n\nFor each vulnerability discovered, provide this EXACT JSON structure:\n[\n  {\n    \"severity\": \"low|medium|high|critical\",\n    \"title\": \"Concise vulnerability name (max 50 chars)\",\n    \"description\": \"Detailed technical explanation: What is the vulnerability? How can it be exploited? What's the impact? Include attack scenarios.\",\n    \"startLine\": line_number_where_vulnerability_starts,\n    \"endLine\": line_number_where_vulnerability_ends,\n    \"fix\": \"Complete working code example showing the secure implementation. Include imports/dependencies if needed.\",\n    \"confidence\": confidence_score_0_to_1,\n    \"cwe\": \"CWE-XXX (if applicable)\",\n    \"owasp\": \"OWASP Top 10 category (if applicable)\",\n    \"attack_vector\": \"How an attacker would exploit this vulnerability\",\n    \"business_impact\": \"Real-world consequences of successful exploitation\"\n  }\n]\n\nCRITICAL INSTRUCTIONS:\n- Return ONLY valid JSON array\n- If no vulnerabilities found, return: []\n- NO markdown formatting, NO extra text\n- Be thorough but precise\n- Consider both obvious and subtle vulnerabilities\n- Look for logic flaws specific to the application context`;\n\n  try {\n    const response = await model.invoke(enhancedSecurityPrompt);\n    const aiResponse = response.content as string;\n    \n    // Clean and parse AI response\n    let jsonStr = aiResponse.trim();\n    \n    // Remove any markdown formatting\n    if (jsonStr.startsWith('```')) {\n      jsonStr = jsonStr.replace(/```[a-z]*\\n?/g, '').replace(/```$/g, '');\n    }\n    \n    // Parse the JSON response\n    const aiVulnerabilities = JSON.parse(jsonStr);\n    \n    // Convert to our internal Vulnerability format\n    const vulnerabilities: Vulnerability[] = aiVulnerabilities.map((v: any) => ({\n      severity: v.severity === 'critical' ? 'high' : (v.severity || \"medium\") as \"low\" | \"medium\" | \"high\",\n      title: v.title || \"Security Issue Detected\",\n      description: v.description || \"AI identified a potential security vulnerability\",\n      file: snippet.name,\n      startLine: v.startLine || 1,\n      endLine: v.endLine || v.startLine || 1,\n      fix: v.fix || \"Review code for security improvements\",\n      confidence: v.confidence || 0.85\n    }));\n    \n    console.log(`‚úÖ AI analysis complete: ${vulnerabilities.length} vulnerabilities found in ${snippet.name}`);\n    \n    // Log detailed results for debugging\n    if (vulnerabilities.length > 0) {\n      console.log(`üîç Vulnerabilities in ${snippet.name}:`, vulnerabilities.map(v => v.title));\n    }\n    \n    return vulnerabilities;\n    \n  } catch (parseError) {\n    console.error(`‚ùå Failed to parse AI response for ${snippet.name}:`, parseError);\n    throw new Error(`AI analysis failed: Invalid response format from OpenAI`);\n  }\n}\n\n/* ----------------------------\n   fetchRepoFiles: uses git/trees for a single recursive listing\n   ---------------------------- */\nexport async function fetchRepoFiles(owner: string, repo: string, branch = \"main\"): Promise<CodeSnippet[]> {\n  if (!GITHUB_TOKEN) {\n    console.warn(\"‚ö†Ô∏è NO GITHUB TOKEN ‚Äî returning demo files (for hackathon).\");\n    return [\n      {\n        name: \"server.js\",\n        path: \"server.js\",\n        content: `const express = require('express');\\nconst app = express();\\nconst password = \"hardcoded123\";\\n// insecure sample...`,\n        language: \"js\",\n        size: 512,\n      },\n    ];\n  }\n\n  // Step 1: get the SHA of the branch\n  const branchResp = await axios.get(`${GITHUB_API}/repos/${owner}/${repo}/branches/${branch}`, {\n    headers: { Authorization: `token ${GITHUB_TOKEN}`, Accept: \"application/vnd.github.v3+json\" },\n    timeout: 10000,\n  }).catch((e: any) => {\n    throw new Error(`Failed to fetch branch ${branch}: ${e?.response?.status || e.message}`);\n  });\n\n  const commitSha = branchResp.data?.commit?.commit?.tree?.sha || branchResp.data?.commit?.sha;\n  if (!commitSha) {\n    throw new Error(\"Could not locate branch commit SHA.\");\n  }\n\n  // Step 2: get a recursive tree (single call)\n  const treeResp = await axios.get(`${GITHUB_API}/repos/${owner}/${repo}/git/trees/${commitSha}?recursive=1`, {\n    headers: { Authorization: `token ${GITHUB_TOKEN}`, Accept: \"application/vnd.github.v3+json\" },\n    timeout: 20000,\n  });\n\n  const items: any[] = treeResp.data?.tree || [];\n  const ALLOWED_EXT = /\\.(js|ts|py|java|php|rb|go|rs|jsx|tsx|mjs|cjs|env|config|conf|ini|xml|yaml|yml|json|md|txt)$/i;\n  const IGNORED_PATHS = [/node_modules/, /\\.gitignore/, /package-lock\\.json/, /^dist\\//, /^build\\//, /\\.DS_Store/];\n\n  const candidates = items\n    .filter((it) => it.type === \"blob\")\n    .filter((it) => ALLOWED_EXT.test(it.path) || /\\.env$/i.test(it.path) || /config/i.test(it.path))\n    .filter((it) => !IGNORED_PATHS.some((r) => r.test(it.path)))\n    .slice(0, MAX_FILES);\n\n  // Step 3: download files in limited concurrency\n  const limit = pLimit(BATCH_DOWNLOAD_CONCURRENCY);\n  const downloads = candidates.map((it) =>\n    limit(async (): Promise<CodeSnippet | null> => {\n      try {\n        if (it.size > MAX_FILE_SIZE) {\n          console.warn(`Skipping large file ${it.path} size=${it.size}`);\n          return null;\n        }\n        const rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${it.path}`;\n        const resp = await axios.get<string>(rawUrl, { timeout: 15000, responseType: \"text\", transformResponse: [(v: any) => v] });\n        return {\n          name: it.path,\n          path: it.path,\n          content: resp.data,\n          language: it.path.split(\".\").pop()?.toLowerCase() || \"txt\",\n          size: it.size,\n        };\n      } catch (err: any) {\n        console.warn(`Failed to fetch ${it.path}: ${err?.message || err}`);\n        return null;\n      }\n    })\n  );\n\n  const results = await Promise.all(downloads);\n  const final = results.filter(Boolean) as CodeSnippet[];\n  console.log(`Fetched ${final.length} files from ${owner}/${repo}`);\n  return final;\n}\n\n/* ----------------------------\n   chunkFileIntoRanges: split large files into chunks with line numbers\n   ---------------------------- */\nfunction chunkFileIntoRanges(snippet: CodeSnippet, linesPerChunk = LINES_PER_CHUNK) {\n  const lines = snippet.content.split(/\\r?\\n/);\n  const chunks: { text: string; startLine: number; endLine: number; file: string }[] = [];\n  for (let i = 0; i < lines.length; i += linesPerChunk) {\n    const start = i + 1;\n    const end = Math.min(i + linesPerChunk, lines.length);\n    const text = lines.slice(i, end).join(\"\\n\");\n    chunks.push({ text, startLine: start, endLine: end, file: snippet.name });\n  }\n  return chunks;\n}\n\n/* ----------------------------\n   AI-Powered Security Scan (replaces basic regex patterns)\n   ---------------------------- */\nexport async function cheapPreScan(snippet: CodeSnippet): Promise<Vulnerability[]> {\n  console.log(`üîç Starting AI security analysis for ${snippet.name}...`);\n  \n  // Use AI-powered analysis instead of hardcoded patterns\n  return await analyzeCodeWithAI(snippet);\n}\n\n// Removed getQuickFix - now using AI-generated fixes instead\n\n/* ----------------------------\n   Intelligent Dual-Engine Security Analysis (AI + Semgrep)\n   No hardcoded patterns - Pure AI intelligence\n   ---------------------------- */\nexport async function scanRepoFiles(snippets: CodeSnippet[], useEnhancedScan: boolean = true): Promise<ScanResult[]> {\n  if (!OPENAI_KEY) {\n    throw new Error(\"üö® OpenAI API key required for security analysis. This scanner relies on AI intelligence, not hardcoded patterns.\");\n  }\n\n  const startTime = Date.now();\n  console.log(`üöÄ OPTIMIZED: Starting performance-tuned security analysis of ${snippets.length} files...`);\n\n  console.log(`ÔøΩÔ∏è Starting intelligent security analysis of ${snippets.length} files...`);\n  console.log(`üîß Analysis engines: ${useEnhancedScan ? 'AI + Semgrep (Enhanced)' : 'AI Only'}`);\n\n  // Quick pre-filter for obviously safe files to improve performance\n  const relevantFiles = snippets.filter(s => {\n    // Skip common non-security files\n    if (/\\.(md|txt|json|lock|gitignore|png|jpg|svg|ico|gif|woff|ttf|eot|pdf)$/i.test(s.name)) return false;\n    // Skip oversized files (likely minified)\n    if (s.size && s.size > MAX_FILE_SIZE) return false;\n    return true;\n  });\n\n  console.log(`üìä Filtered to ${relevantFiles.length} relevant files for analysis`);\n\n  // Smart Semgrep usage - skip for very large repositories to save time\n  const shouldUseSemgrep = useEnhancedScan && relevantFiles.length <= 25;\n  if (useEnhancedScan && !shouldUseSemgrep) {\n    console.log(`‚ö° Skipping Semgrep for large repository (${relevantFiles.length} files) - using AI-only for speed`);\n  }\n\n  // PARALLEL EXECUTION: Run both analyses simultaneously\n  const analysisPromises = [];\n\n  // 1. Optimized AI Analysis (always runs)\n  console.log(`ü§ñ Starting optimized batch AI analysis...`);\n  const aiAnalysisPromise = analyzeAllFilesWithAI(relevantFiles);\n  analysisPromises.push(aiAnalysisPromise);\n\n  // 2. Smart Semgrep Analysis (only for smaller repositories)\n  let semgrepPromise: Promise<SemgrepFinding[]> = Promise.resolve([]);\n  if (shouldUseSemgrep) {\n    console.log(`‚ö° Starting parallel Semgrep analysis on ${relevantFiles.length} files...`);\n    semgrepPromise = runFullSemgrepAnalysis(relevantFiles);\n    analysisPromises.push(semgrepPromise);\n  }\n\n  // Wait for both analyses to complete\n  const [aiResults, semgrepFindings] = await Promise.all([\n    aiAnalysisPromise,\n    semgrepPromise\n  ]);\n\n  // INTELLIGENT MERGE: Combine results with deduplication\n  const finalResults = mergeIntelligentFindings(aiResults, semgrepFindings);\n\n  const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);\n  console.log(`‚úÖ OPTIMIZED: Analysis complete in ${elapsed}s`);\n  console.log(`üìä Results: AI found ${aiResults.length} files, Semgrep found ${semgrepFindings.length} findings`);\n  console.log(`üéØ Final: ${finalResults.length} files with security issues identified`);\n  \n  return finalResults;\n}\n\n/* ----------------------------\n   PERFORMANCE OPTIMIZED AI Analysis - Batch Processing\n   ---------------------------- */\nasync function analyzeAllFilesWithAI(snippets: CodeSnippet[]): Promise<ScanResult[]> {\n  // Smart pre-filtering for performance\n  const criticalFiles = filterCriticalFiles(snippets);\n  \n  console.log(`üöÄ OPTIMIZED: Analyzing ${criticalFiles.length}/${snippets.length} critical files`);\n  \n  if (criticalFiles.length === 0) {\n    console.log(\"‚úÖ No critical files found for AI analysis\");\n    return [];\n  }\n\n  // Batch files for more efficient API usage\n  return await batchAnalyzeWithAI(criticalFiles);\n}\n\n/* ----------------------------\n   Smart File Filtering - Skip non-security-relevant files\n   ---------------------------- */\nfunction filterCriticalFiles(snippets: CodeSnippet[]): CodeSnippet[] {\n  const SKIP_FILES = /\\.(md|txt|json|lock|png|jpg|gif|ico|svg|woff|ttf|eot|pdf|zip|tar|gz|log|bak|tmp)$/i;\n  const PRIORITY_FILES = /\\.(js|ts|py|php|java|rb|go|jsx|tsx|vue|swift|kt|scala|cs|cpp|c|h|sql|sh|yaml|yml|xml|html)$/i;\n  \n  return snippets.filter(snippet => {\n    // Skip obviously safe files\n    if (SKIP_FILES.test(snippet.name)) return false;\n    \n    // Skip huge files (likely to be minified or generated)\n    if (snippet.size && snippet.size > 100000) return false;\n    \n    // Skip tiny files unless they're priority types\n    if (snippet.size && snippet.size < 50 && !PRIORITY_FILES.test(snippet.name)) return false;\n    \n    // Include if it's a priority file type\n    if (PRIORITY_FILES.test(snippet.name)) return true;\n    \n    // Include if content suggests security relevance\n    const securityKeywords = ['password', 'secret', 'key', 'token', 'auth', 'eval(', 'exec(', 'SELECT ', 'INSERT ', 'DELETE ', 'UPDATE '];\n    const hasSecurityKeywords = securityKeywords.some(keyword => \n      snippet.content.toLowerCase().includes(keyword.toLowerCase())\n    );\n    \n    return hasSecurityKeywords;\n  });\n}\n\n/* ----------------------------\n   Batch AI Analysis - Multiple files per API call\n   ---------------------------- */\nasync function batchAnalyzeWithAI(snippets: CodeSnippet[]): Promise<ScanResult[]> {\n  const BATCH_SIZE = 3; // Analyze 3 files per AI call for efficiency\n  const batches: CodeSnippet[][] = [];\n  \n  // Create batches of files\n  for (let i = 0; i < snippets.length; i += BATCH_SIZE) {\n    batches.push(snippets.slice(i, i + BATCH_SIZE));\n  }\n\n  console.log(`üîÑ Processing ${batches.length} batches (${BATCH_SIZE} files each)`);\n\n  // Process batches with reduced concurrency for stability\n  const limit = pLimit(2); // Reduced for better performance and rate limit compliance\n  const allResults: ScanResult[] = [];\n\n  const batchPromises = batches.map((batch, batchIndex) =>\n    limit(async () => {\n      try {\n        console.log(`üì¶ Processing batch ${batchIndex + 1}/${batches.length}`);\n        const batchResults = await analyzeBatchWithAI(batch);\n        return batchResults;\n      } catch (error) {\n        console.error(`‚ùå Batch ${batchIndex + 1} analysis failed:`, error);\n        return [];\n      }\n    })\n  );\n\n  const allBatchResults = await Promise.all(batchPromises);\n  return allBatchResults.flat();\n}\n\n/* ----------------------------\n   Single Batch AI Analysis - Analyzes multiple files in one API call\n   ---------------------------- */\nasync function analyzeBatchWithAI(batch: CodeSnippet[]): Promise<ScanResult[]> {\n  if (!OPENAI_KEY) return [];\n\n  const model = new ChatOpenAI({\n    model: OPENAI_MODEL,\n    temperature: 0.1,\n    openAIApiKey: OPENAI_KEY,\n  });\n\n  // Create combined prompt for multiple files\n  const filesContent = batch.map((snippet, idx) => \n    `FILE_${idx + 1}: ${snippet.name}\nLanguage: ${snippet.language}\n\\`\\`\\`${snippet.language}\n${snippet.content.slice(0, 8000)} ${snippet.content.length > 8000 ? '... (truncated)' : ''}\n\\`\\`\\`\n`).join('\\n' + '='.repeat(50) + '\\n');\n\n  const batchPrompt = `You are an elite cybersecurity expert. Analyze these ${batch.length} files for security vulnerabilities.\n\nFor each file that has vulnerabilities, return them in this EXACT JSON structure:\n{\n  \"results\": {\n    \"${batch[0].name}\": [\n      {\n        \"severity\": \"low|medium|high\",\n        \"title\": \"Vulnerability name (max 50 chars)\",\n        \"description\": \"Detailed explanation of the vulnerability and how it can be exploited\",\n        \"startLine\": line_number,\n        \"endLine\": line_number,\n        \"fix\": \"Complete secure code example or detailed fix instructions\",\n        \"confidence\": confidence_score_0_to_1\n      }\n    ],\n    \"${batch[1]?.name || 'file2.ext'}\": [],\n    \"${batch[2]?.name || 'file3.ext'}\": []\n  }\n}\n\nCRITICAL: \n- Return ONLY the JSON object, no extra text\n- If a file has no vulnerabilities, use empty array []\n- Focus on: SQL Injection, XSS, Command Injection, Hardcoded Secrets, Path Traversal, Code Injection, Weak Crypto\n\nFILES TO ANALYZE:\n${filesContent}`;\n\n  try {\n    const response = await model.invoke(batchPrompt);\n    const aiResponse = response.content as string;\n    \n    // Clean and parse AI response\n    let jsonStr = aiResponse.trim();\n    if (jsonStr.startsWith('```')) {\n      jsonStr = jsonStr.replace(/```[a-z]*\\n?/g, '').replace(/```$/g, '');\n    }\n    \n    const batchResults = JSON.parse(jsonStr);\n    const scanResults: ScanResult[] = [];\n    \n    // Convert batch results to ScanResult format\n    const results = batchResults.results || batchResults;\n    for (const [fileName, vulnerabilities] of Object.entries(results)) {\n      if (Array.isArray(vulnerabilities) && vulnerabilities.length > 0) {\n        const formattedVulns = vulnerabilities.map((v: any) => ({\n          severity: v.severity === 'critical' ? 'high' : (v.severity || \"medium\") as \"low\" | \"medium\" | \"high\",\n          title: v.title || \"Security Issue Detected\",\n          description: v.description || \"AI identified a potential security vulnerability\",\n          file: fileName,\n          startLine: v.startLine || 1,\n          endLine: v.endLine || v.startLine || 1,\n          fix: v.fix || \"Review code for security improvements\",\n          confidence: v.confidence || 0.85\n        }));\n        \n        scanResults.push({\n          file: fileName,\n          vulnerabilities: formattedVulns\n        });\n      }\n    }\n    \n    console.log(`‚úÖ Batch analysis: ${scanResults.length} files with vulnerabilities found`);\n    return scanResults;\n    \n  } catch (error) {\n    console.error(`‚ùå Batch AI analysis failed:`, error);\n    // Fallback to individual analysis if batch fails\n    console.log(`üîÑ Falling back to individual file analysis for batch`);\n    return await fallbackIndividualAnalysis(batch);\n  }\n}\n\n/* ----------------------------\n   Fallback Individual Analysis - Used when batch analysis fails\n   ---------------------------- */\nasync function fallbackIndividualAnalysis(batch: CodeSnippet[]): Promise<ScanResult[]> {\n  const results: ScanResult[] = [];\n  \n  for (const snippet of batch) {\n    try {\n      const vulnerabilities = await analyzeCodeWithAI(snippet);\n      if (vulnerabilities.length > 0) {\n        results.push({ file: snippet.name, vulnerabilities });\n      }\n    } catch (error) {\n      console.error(`‚ùå Individual analysis failed for ${snippet.name}:`, error);\n    }\n  }\n  \n  return results;\n}\n\n/* ----------------------------\n   Semgrep Analysis Engine - Professional static analysis\n   ---------------------------- */\nasync function runFullSemgrepAnalysis(snippets: CodeSnippet[]): Promise<SemgrepFinding[]> {\n  try {\n    // Create temporary directory with all repository files\n    const tempDir = await createTempRepoDir(snippets);\n    \n    // Run comprehensive Semgrep analysis\n    const semgrepFindings = await runSemgrepAnalysis(tempDir);\n    \n    console.log(`üîç Semgrep analysis complete: ${semgrepFindings.length} findings`);\n    return semgrepFindings;\n    \n  } catch (error) {\n    console.error(`‚ùå Semgrep analysis failed:`, error);\n    throw error; // No fallback - fail fast\n  }\n}\n\n/* ----------------------------\n   Intelligent Results Merger - Combines AI + Semgrep with smart deduplication\n   ---------------------------- */\nfunction mergeIntelligentFindings(aiResults: ScanResult[], semgrepFindings: SemgrepFinding[]): ScanResult[] {\n  const mergedResults = new Map<string, ScanResult>();\n\n  // Add all AI findings first\n  for (const result of aiResults) {\n    mergedResults.set(result.file, result);\n  }\n\n  // Integrate Semgrep findings\n  for (const semgrepFinding of semgrepFindings) {\n    // Find matching file\n    const fileName = semgrepFinding.file.split('/').pop() || semgrepFinding.file;\n    const matchingFile = Array.from(mergedResults.keys()).find(key => \n      key.endsWith(fileName) || key === semgrepFinding.file\n    ) || fileName;\n\n    // Convert Semgrep finding to Vulnerability format\n    const semgrepVuln: Vulnerability = {\n      severity: mapSemgrepSeverity(semgrepFinding.severity),\n      title: formatSemgrepTitle(semgrepFinding.issue),\n      description: semgrepFinding.description,\n      file: matchingFile,\n      startLine: semgrepFinding.line,\n      endLine: semgrepFinding.line,\n      fix: semgrepFinding.secure_code_fix,\n      confidence: 0.95 // Semgrep has high confidence\n    };\n\n    // Add or merge with existing results\n    if (mergedResults.has(matchingFile)) {\n      const existing = mergedResults.get(matchingFile)!;\n      \n      // Check for duplicates (same vulnerability type and line)\n      const isDuplicate = existing.vulnerabilities.some(v => \n        v.title === semgrepVuln.title && \n        Math.abs((v.startLine || 0) - (semgrepVuln.startLine || 0)) <= 2\n      );\n\n      if (!isDuplicate) {\n        existing.vulnerabilities.push(semgrepVuln);\n      }\n    } else {\n      mergedResults.set(matchingFile, {\n        file: matchingFile,\n        vulnerabilities: [semgrepVuln]\n      });\n    }\n  }\n\n  return Array.from(mergedResults.values());\n}\n\n/* ----------------------------\n   Utility functions for Semgrep integration\n   ---------------------------- */\nfunction mapSemgrepSeverity(severity: string): \"low\" | \"medium\" | \"high\" {\n  const severityMap: Record<string, \"low\" | \"medium\" | \"high\"> = {\n    'ERROR': 'high',\n    'WARNING': 'medium', \n    'INFO': 'low',\n    'HIGH': 'high',\n    'MEDIUM': 'medium',\n    'LOW': 'low'\n  };\n  return severityMap[severity.toUpperCase()] || 'medium';\n}\n\nfunction formatSemgrepTitle(issue: string): string {\n  return issue\n    .replace(/_/g, ' ')\n    .replace(/\\b\\w/g, l => l.toUpperCase())\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n/* ----------------------------\n   Helper function to create temporary directory for Semgrep\n   ---------------------------- */\nasync function createTempRepoDir(snippets: CodeSnippet[]): Promise<string> {\n  const fs = await import('fs/promises');\n  const os = await import('os');\n  const path = await import('path');\n  \n  // Create temporary directory\n  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'semgrep-scan-'));\n  \n  // Write all files to temp directory\n  for (const snippet of snippets) {\n    const filePath = path.join(tempDir, snippet.name);\n    const dirPath = path.dirname(filePath);\n    \n    // Ensure directory exists\n    await fs.mkdir(dirPath, { recursive: true });\n    \n    // Write file content\n    await fs.writeFile(filePath, snippet.content, 'utf8');\n  }\n  \n  console.log(`üìÅ Created temporary repository at ${tempDir}`);\n  return tempDir;\n}\n\n/* ----------------------------\n   Debug function to check environment variables\n   ---------------------------- */\nexport async function debugEnvironment() {\n  return {\n    hasGithubToken: !!GITHUB_TOKEN,\n    hasOpenAiKey: !!OPENAI_KEY,\n    githubApi: GITHUB_API,\n    openaiModel: OPENAI_MODEL,\n    githubTokenPreview: GITHUB_TOKEN ? `${GITHUB_TOKEN.substring(0, 10)}...` : \"Not set\",\n    openaiKeyPreview: OPENAI_KEY ? `${OPENAI_KEY.substring(0, 10)}...` : \"Not set\"\n  };\n}\n\n/* ----------------------------\n   Legacy compatibility functions for existing UI\n   ---------------------------- */\nexport async function checkCodeSecurity(code: string): Promise<{ \n  isSecure: boolean; \n  vulnerabilities: Vulnerability[] \n}> {\n  const snippet: CodeSnippet = {\n    name: \"input.js\",\n    path: \"input.js\",\n    content: code,\n    language: \"javascript\",\n    size: code.length\n  };\n  \n  const vulnerabilities = await cheapPreScan(snippet);\n  return {\n    isSecure: vulnerabilities.length === 0,\n    vulnerabilities\n  };\n}\n\nexport async function scanVulnerability(code: string): Promise<VulnerabilityCardContentType & { correctCode: string }> {\n  console.log(\"üîç scanVulnerability called with code length:\", code.length);\n  console.log(\"üîë Environment check - OPENAI_KEY exists:\", !!OPENAI_KEY);\n  console.log(\"üîë Environment check - GITHUB_TOKEN exists:\", !!GITHUB_TOKEN);\n  \n  const snippet: CodeSnippet = {\n    name: \"temp.js\",\n    path: \"temp.js\", \n    content: code,\n    language: \"javascript\",\n    size: code.length\n  };\n  \n  const vulnerabilities = await cheapPreScan(snippet);\n  console.log(\"üìã Found vulnerabilities:\", vulnerabilities.length);\n  \n  if (vulnerabilities.length === 0) {\n    return {\n      riskLevel: \"low\",\n      riskTitle: \"No Issues Found\", \n      riskDescription: \"The code appears to be secure based on our analysis.\",\n      correctCode: code\n    };\n  }\n  \n  const highestSeverity = vulnerabilities.reduce((highest, curr) => {\n    const severityOrder = { low: 1, medium: 2, high: 3 };\n    return severityOrder[curr.severity] > severityOrder[highest.severity] ? curr : highest;\n  });\n  \n  // Generate better descriptions and secure code fixes\n  const secureCodeFix = generateSecureCodeFix(code, highestSeverity);\n  \n  return {\n    riskLevel: highestSeverity.severity,\n    riskTitle: highestSeverity.title,\n    riskDescription: getDetailedDescription(highestSeverity, code),\n    correctCode: secureCodeFix\n  };\n}\n\nfunction getDetailedDescription(vulnerability: Vulnerability, originalCode: string): string {\n  const descriptions: Record<string, string> = {\n    \"hardcoded_secrets\": `This code contains hardcoded sensitive information (API keys, passwords, tokens, or secrets) directly in the source code. This is a critical security vulnerability because:\n\n‚Ä¢ Secrets are visible to anyone with access to the code\n‚Ä¢ Version control systems store these secrets permanently  \n‚Ä¢ Deployed applications expose secrets in plain text\n‚Ä¢ Attackers can extract and misuse these credentials\n\nThe detected pattern suggests sensitive data is embedded directly in the code rather than being loaded from secure environment variables or a secrets management system.`,\n\n    \"sql_string_interp\": `This code uses string interpolation to build SQL queries, making it vulnerable to SQL injection attacks. This occurs when user input is directly concatenated into SQL statements without proper sanitization:\n\n‚Ä¢ Attackers can inject malicious SQL code through input parameters\n‚Ä¢ Database contents can be read, modified, or deleted\n‚Ä¢ Administrative access to the database may be compromised\n‚Ä¢ Application logic can be bypassed\n\nThe vulnerability allows attackers to manipulate the SQL query structure by providing specially crafted input values.`,\n\n    \"eval_os_system\": `This code uses dynamic code execution functions (eval, system, exec) which can lead to remote code execution vulnerabilities:\n\n‚Ä¢ Attackers can execute arbitrary code on the server\n‚Ä¢ System commands can be injected and executed\n‚Ä¢ Full system compromise is possible\n‚Ä¢ Application sandbox can be escaped\n\nThese functions should never process untrusted input as they interpret and execute the input as code or system commands.`,\n\n    \"weak_hash\": `This code uses cryptographically weak hashing algorithms (MD5, SHA1) that are vulnerable to collision attacks and rainbow table lookups:\n\n‚Ä¢ MD5 and SHA1 are considered broken for security purposes\n‚Ä¢ Modern hardware can compute billions of hashes per second\n‚Ä¢ Precomputed hash tables (rainbow tables) exist for common inputs\n‚Ä¢ Collisions can be generated with reasonable computational effort\n\nFor security-sensitive applications, use stronger algorithms like SHA-256, SHA-3, or bcrypt for password hashing.`,\n\n    \"path_traversal\": `This code appears to be vulnerable to path traversal attacks, where attackers can access files outside the intended directory:\n\n‚Ä¢ Users can provide paths with \"../\" sequences to navigate up directories\n‚Ä¢ Sensitive system files may be accessible\n‚Ä¢ Application configuration files could be exposed\n‚Ä¢ The vulnerability can lead to information disclosure or code execution\n\nFile operations should validate and sanitize all path inputs to prevent directory traversal.`\n  };\n\n  return descriptions[vulnerability.title] || vulnerability.description;\n}\n\nfunction generateSecureCodeFix(originalCode: string, vulnerability: Vulnerability): string {\n  const fixes: Record<string, (code: string) => string> = {\n    \"hardcoded_secrets\": (code: string) => {\n      let fixedCode = code;\n      \n      const patterns = [\n        { pattern: /(API_KEY|SECRET|PASSWORD|TOKEN)\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: '$1 = process.env.$1 || \"\"' },\n        { pattern: /apiKey\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: 'apiKey = process.env.API_KEY || \"\"' },\n        { pattern: /password\\s*[:=]\\s*[\"']([^\"']+)[\"']/gi, \n          replacement: 'password = process.env.PASSWORD || \"\"' }\n      ];\n      \n      patterns.forEach(({ pattern, replacement }) => {\n        fixedCode = fixedCode.replace(pattern, replacement);\n      });\n      \n      if (!fixedCode.includes('require(\"dotenv\")') && !fixedCode.includes('import dotenv')) {\n        fixedCode = 'require(\"dotenv\").config();\\n\\n' + fixedCode;\n      }\n      \n      return `// ‚úÖ Secure version - uses environment variables\n${fixedCode}\n\n// Add to your .env file:\n// API_KEY=your_actual_api_key_here\n// PASSWORD=your_actual_password_here`;\n    },\n\n    \"sql_string_interp\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(\n        /SELECT.*FROM.*WHERE.*\\$\\{.*\\}/gi,\n        'SELECT * FROM users WHERE id = ?'\n      );\n      \n      return `// ‚úÖ Secure version - uses parameterized queries\n${fixedCode}\n\n// Example with proper parameterization:\n// const query = 'SELECT * FROM users WHERE id = ? AND name = ?';\n// const results = await db.query(query, [userId, userName]);`;\n    },\n\n    \"eval_os_system\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(/eval\\s*\\([^)]+\\)/gi, '// eval() removed - use safer alternatives');\n      fixedCode = fixedCode.replace(/os\\.system\\s*\\([^)]+\\)/gi, '// os.system() removed - use subprocess with validation');\n      fixedCode = fixedCode.replace(/system\\s*\\([^)]+\\)/gi, '// system() removed - use safer alternatives');\n      \n      return `// ‚úÖ Secure version - removes dynamic code execution\n${fixedCode}\n\n// Safe alternatives:\n// - Instead of eval(): use JSON.parse() for data, or a proper parser\n// - Instead of system(): use child_process.spawn() with input validation`;\n    },\n\n    \"weak_hash\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(/md5\\s*\\(/gi, 'crypto.createHash(\"sha256\")');\n      fixedCode = fixedCode.replace(/sha1\\s*\\(/gi, 'crypto.createHash(\"sha256\")');\n      \n      return `// ‚úÖ Secure version - uses strong hashing\nconst crypto = require('crypto');\n${fixedCode}\n\n// For password hashing, use bcrypt:\n// const bcrypt = require('bcrypt');\n// const hashedPassword = await bcrypt.hash(password, 12);`;\n    },\n\n    \"path_traversal\": (code: string) => {\n      let fixedCode = code;\n      fixedCode = fixedCode.replace(\n        /(open\\s*\\(|fs\\.readFileSync\\s*\\(|readFile\\s*\\()[^,)]+/gi,\n        '$1path.resolve(SAFE_DIR, path.basename(filename))'\n      );\n      \n      return `// ‚úÖ Secure version - validates file paths\nconst path = require('path');\nconst SAFE_DIR = '/safe/directory';\n\n${fixedCode}\n\n// Additional security measures:\n// - Use path.resolve() and path.basename() to sanitize paths  \n// - Define an allowed directory and never go outside it`;\n    }\n  };\n\n  const fixFunction = fixes[vulnerability.title];\n  if (fixFunction) {\n    return fixFunction(originalCode);\n  }\n  \n  return `// ‚úÖ Secure version\n${originalCode}\n\n// General security recommendations:\n// - Validate and sanitize all inputs\n// - Use environment variables for secrets\n// - Apply principle of least privilege`;\n}\n\n/* ----------------------------\n   Enhanced repository scanning with Semgrep\n   ---------------------------- */\nexport async function scanRepository(owner: string, repo: string): Promise<ScanResult[]> {\n  const files = await fetchRepoFiles(owner, repo);\n  return await scanRepoFiles(files, true); // Enable enhanced scanning\n}\n\n/* ----------------------------\n   Example server handler usage (Next.js / Express)\n   ---------------------------- */\nexport async function handleScanRequest(req: any, res: any) {\n  try {\n    const { owner, repo, branch, enhanced = true } = req.body || req.query;\n    if (!owner || !repo) return res.status(400).json({ error: \"owner & repo required\" });\n\n    const files = await fetchRepoFiles(owner, repo, branch || \"main\");\n    if (!files.length) return res.status(200).json({ results: [] });\n\n    const results = await scanRepoFiles(files, enhanced);\n    return res.status(200).json({ \n      results, \n      scannedFiles: files.length,\n      enhancedScanEnabled: enhanced && !!OPENAI_KEY\n    });\n  } catch (err: any) {\n    console.error(\"scan error:\", err?.message || err);\n    return res.status(500).json({ error: err?.message || \"scan failed\" });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1032, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1101, "column": 0}, "map": {"version":3,"sources":["file:///home/rit3sh/Downloads/yoyoyo-main/src/app/%5B...slug%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/[...slug]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/[...slug]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 1115, "column": 0}, "map": {"version":3,"sources":["file:///home/rit3sh/Downloads/yoyoyo-main/src/app/%5B...slug%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/[...slug]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/[...slug]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 1129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}