import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { cn } from "@/lib/utils";
import { Check, Copy, Cross, Loader2Icon, XIcon } from "lucide-react";
import SyntaxHighlighter from "react-syntax-highlighter";
import { atomOneLight } from "react-syntax-highlighter/dist/esm/styles/hljs";
import { Button } from "./ui/button";

function VulnerabilityCard({
  riskDescription,
  riskLevel,
  riskTitle,
  correctCode,
  setOpenCard,
  codeLanguage,
  vulnerabilityCardLoading,
  codeFileName,
  setSelectedSnippetIndex,
}: VulnerabilityCardProps & {
  setSelectedSnippetIndex: React.Dispatch<React.SetStateAction<number | null>>;
}) {
  const [selectedTab, setSelectedTab] = useState("description");
  const [copied, setCopied] = useState<"pass" | "fail" | null>(null);

  return (
    <Card className="w-1/2  p-6 bg-white rounded-xl shadow-sm border border-gray-200 h-fit  max-h-svh overflow-scroll sticky top-2">
      <div className="absolute right-4 top-4">
        <XIcon
          className="h-4 w-4 text-gray-400 hover:text-gray-600 cursor-pointer"
          onClick={() => {
            if (setOpenCard) {
              setOpenCard(false);
              setSelectedSnippetIndex(null);
            }
          }}
        />
      </div>
      <CardContent className="space-y-4 ">
        <div className="flex justify-between items-center">
          {/* Tab Selector */}
          <Tabs
            defaultValue="description"
            onValueChange={setSelectedTab}
            className="mb-2"
          >
            {codeFileName && (
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 rounded-md bg-gray-100 flex items-center justify-center">
                  <span className="text-sm">ðŸ“„</span>
                </div>
                <div className="text-left">
                  <div className="font-medium text-gray-800 text-sm">
                    {codeFileName?.split("/").pop()}
                  </div>
                  <div className="text-xs text-gray-400 font-mono mt-1">
                    {/* File name */}
                    {codeFileName}
                  </div>
                </div>
              </div>
            )}
            <TabsList className="flex space-x-2 bg-transparent p-0">
              <TabsTrigger
                value="description"
                className="px-3 py-1.5 text-sm font-medium rounded-lg 
                data-[state=active]:bg-gray-50 data-[state=active]:text-gray-900
                text-gray-500 hover:text-gray-700 transition-colors"
                disabled={vulnerabilityCardLoading}
              >
                Description
              </TabsTrigger>
              <TabsTrigger
                value="code"
                className="px-3 py-1.5 text-sm font-medium rounded-lg 
                data-[state=active]:bg-gray-50 data-[state=active]:text-gray-900
                text-gray-500 hover:text-gray-700 transition-colors"
                disabled={vulnerabilityCardLoading}
              >
                Secure Code
              </TabsTrigger>
            </TabsList>
          </Tabs>
          {selectedTab === "code" && (
            <Button
              variant={"outline"}
              className="cursor-pointer"
              onClick={async () => {
                try {
                  // Copy the corrected code to the clipboard
                  await navigator.clipboard.writeText(correctCode);
                  setCopied("pass");
                } catch (error: unknown) {
                  setCopied("fail");
                  console.error("Failed to copy:", error);
                } finally {
                  const timeoutId = setTimeout(() => setCopied(null), 2000);
                  return () => clearTimeout(timeoutId);
                }
              }}
            >
              {copied === null ? (
                <Copy className="text-gray-400" />
              ) : copied === "pass" ? (
                <Check className="text-green-500" />
              ) : (
                <Cross className="text-red-500 rotate-45" />
              )}
            </Button>
          )}
        </div>

        {/* Content */}
        <div className="space-y-4">
          {vulnerabilityCardLoading ? (
            // Loading
            <div className="h-20 grid place-items-center">
              <Loader2Icon className="text-gray-400 animate-spin" />
            </div>
          ) : selectedTab === "description" ? (
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <span
                  className={cn("px-2 py-1  text-xs font-medium rounded-md", {
                    "text-red-700 bg-red-50": riskLevel === "high",
                    "text-yellow-700 bg-yellow-50": riskLevel === "medium",
                    "text-green-700 bg-green-50": riskLevel === "low",
                    "text-gray-700 bg-gray-100": riskLevel === "error",
                  })}
                >
                  {(riskLevel !== null &&
                    riskLevel[0]?.toUpperCase() + riskLevel?.slice(1)) ||
                    ""}
                </span>
                <h3 className="text-sm font-semibold text-gray-900">
                  {riskTitle}
                </h3>
              </div>
              <p className="text-gray-600 text-sm leading-relaxed">
                {riskDescription ?? ""}
              </p>
            </div>
          ) : (
            <SyntaxHighlighter
              language={codeLanguage || "plaintext"}
              style={atomOneLight}
              className="p-4 text-sm !font-mono !bg-gray-50 "
              showLineNumbers
              wrapLongLines
              lineNumberStyle={{ color: "#9CA3AF" }}
            >
              {correctCode}
            </SyntaxHighlighter>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

export default VulnerabilityCard;
